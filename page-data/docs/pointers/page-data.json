{"componentChunkName":"component---src-templates-docs-page-template-js-content-file-path-docs-10-3-pointer-mdx","path":"/docs/pointers/","result":{"data":{"github":{"data":{"repository":{"releases":{"edges":[{"node":{"publishedAt":"2023-08-11T01:36:42Z","name":"Excalibur v0.28.0 Release","tag":{"name":"v0.28.0"}}},{"node":{"publishedAt":"2022-07-09T01:19:28Z","name":"Excalibur v0.27.0 Release","tag":{"name":"v0.27.0"}}},{"node":{"publishedAt":"2022-05-21T00:49:41Z","name":"Excalibur v0.26.0 Release","tag":{"name":"v0.26.0"}}},{"node":{"publishedAt":"2022-02-05T23:53:33Z","name":"Excalibur v0.25.3 Release","tag":{"name":"v0.25.3"}}},{"node":{"publishedAt":"2022-01-22T04:30:04Z","name":"Excalibur v0.25.2 Release","tag":{"name":"v0.25.2"}}}]}}}},"toc":{"edges":[{"node":{"id":"dad98d07-474c-5672-9dc6-0347e90c6793","frontmatter":{"title":"Welcome","path":"/docs/","section":"Introduction"}}},{"node":{"id":"da624576-bb5a-579b-8759-02496b34e40a","frontmatter":{"title":"Excalibur's Philosophy","path":"/docs/goals","section":"Introduction"}}},{"node":{"id":"2e771808-9321-55e9-af67-192e7aa572e7","frontmatter":{"title":"Installation Guide","path":"/docs/installation","section":"Getting Started"}}},{"node":{"id":"7000635a-aee7-58a5-888d-0046f878975f","frontmatter":{"title":"Getting Started","path":"/docs/getting-started","section":"Getting Started"}}},{"node":{"id":"7e381e47-34bf-5983-8f8a-23cf08fa51a4","frontmatter":{"title":"Build & Bundlers","path":"/docs/bundlers","section":"Getting Started"}}},{"node":{"id":"d76a770e-ba1f-523e-b91e-20478205d36b","frontmatter":{"title":"Actors","path":"/docs/actors","section":"Fundamentals"}}},{"node":{"id":"abda6651-2a20-5771-acf5-75df1b002eb8","frontmatter":{"title":"Engine Fundamentals","path":"/docs/engine","section":"Fundamentals"}}},{"node":{"id":"485c6dcb-8eca-54a2-8b93-c588d83b2de5","frontmatter":{"title":"Cameras","path":"/docs/cameras","section":"Fundamentals"}}},{"node":{"id":"81077a63-24bb-5c0c-b824-e67b0327184c","frontmatter":{"title":"Scenes","path":"/docs/scenes","section":"Fundamentals"}}},{"node":{"id":"50cfedc7-12ae-5b69-87f1-bbeb5ba25a1c","frontmatter":{"title":"DisplayModes","path":"/docs/displaymodes","section":"Screen & Viewport"}}},{"node":{"id":"41945ef9-20a8-57a2-a98f-8c65910a4146","frontmatter":{"title":"Screen & Viewport","path":"/docs/screens","section":"Screen & Viewport"}}},{"node":{"id":"d3d0686a-208c-5965-a7fe-bdd370ec06b9","frontmatter":{"title":"Color","path":"/docs/color","section":"Graphics"}}},{"node":{"id":"8e8a130d-da7f-52bd-9f5b-edca962a2e43","frontmatter":{"title":"Graphics","path":"/docs/graphics","section":"Graphics"}}},{"node":{"id":"2711c428-18f5-5a66-833a-b952df2e1a7e","frontmatter":{"title":"Lines","path":"/docs/lines","section":"Graphics"}}},{"node":{"id":"08e17b5e-202e-56d4-950b-09ace0312d74","frontmatter":{"title":"Sprites","path":"/docs/sprites","section":"Graphics"}}},{"node":{"id":"857b3684-3e57-5975-879e-ae2270543839","frontmatter":{"title":"Spritesheets","path":"/docs/spritesheets","section":"Graphics"}}},{"node":{"id":"fcf36edc-32a3-57aa-ad00-391494f7766b","frontmatter":{"title":"Text & Fonts","path":"/docs/text","section":"Graphics"}}},{"node":{"id":"91be0486-77db-5548-ab44-fd6e02d73284","frontmatter":{"title":"Animation","path":"/docs/animation","section":"Graphics"}}},{"node":{"id":"9c76d3f3-5289-5d6b-a176-1f346d2e621b","frontmatter":{"title":"Canvas","path":"/docs/canvas","section":"Graphics"}}},{"node":{"id":"a69a38dd-0055-5d88-abf7-43f8b7062d4c","frontmatter":{"title":"Graphics Component","path":"/docs/graphics-component","section":"Graphics"}}},{"node":{"id":"a01c37b7-e332-5c7e-b4d8-de9bd992ec43","frontmatter":{"title":"Graphics Group","path":"/docs/graphics-group","section":"Graphics"}}},{"node":{"id":"eb15a261-5762-51d2-97f1-9cf4b32c9693","frontmatter":{"title":"Material","path":"/docs/material","section":"Graphics"}}},{"node":{"id":"fbe8508e-5a7e-57bc-a029-f07acedfd969","frontmatter":{"title":"Graphics Context","path":"/docs/graphics-context","section":"Graphics"}}},{"node":{"id":"bf6363fc-32f2-5161-a842-dec6b9c8934c","frontmatter":{"title":"Parallax","path":"/docs/parallax","section":"Graphics"}}},{"node":{"id":"f1efbb7b-69f5-5f8f-9391-21b21f9598cd","frontmatter":{"title":"ECS","path":"/docs/entity-component-system","section":"Entity Component System"}}},{"node":{"id":"cafde7bd-f517-5362-95ec-6b4bf7ca80bb","frontmatter":{"title":"ImageSource","path":"/docs/imagesource","section":"Resources"}}},{"node":{"id":"a0f02255-f693-5966-844b-4b5cb567a231","frontmatter":{"title":"Loader","path":"/docs/loader","section":"Resources"}}},{"node":{"id":"53e76878-d0d8-55ef-9f8a-7bb0a50a5fe2","frontmatter":{"title":"Sound","path":"/docs/sound","section":"Resources"}}},{"node":{"id":"7c26d3e6-ced4-529f-9ae8-95a9c18965a7","frontmatter":{"title":"Entities","path":"/docs/entities","section":"Entity Component System"}}},{"node":{"id":"95d94e6c-6505-5c46-92c2-d0fd2796c66d","frontmatter":{"title":"Components","path":"/docs/components","section":"Entity Component System"}}},{"node":{"id":"407163b4-4a21-591c-8268-32feb2794249","frontmatter":{"title":"Systems","path":"/docs/systems","section":"Entity Component System"}}},{"node":{"id":"5b732b02-0afa-532b-971b-7b81950067c0","frontmatter":{"title":"Queries","path":"/docs/queries","section":"Entity Component System"}}},{"node":{"id":"f95325ef-9ad4-5e99-a69d-c00f14774b76","frontmatter":{"title":"Actions","path":"/docs/actions","section":"Actions"}}},{"node":{"id":"f27b1e7d-dccc-5f6b-9ee9-12c92799a241","frontmatter":{"title":"Blink","path":"/docs/actions-blink","section":"Actions"}}},{"node":{"id":"3245878c-014c-5ab9-be83-3e515eff5937","frontmatter":{"title":"CallMethod","path":"/docs/actions-callmethod","section":"Actions"}}},{"node":{"id":"ab4d5e09-8c48-522a-9417-436fd08502f6","frontmatter":{"title":"Parallel Actions","path":"/docs/actions-parallel","section":"Actions"}}},{"node":{"id":"2c8793b5-2707-5118-9c0a-506a8f4ddb49","frontmatter":{"title":"Delay","path":"/docs/actions-delay","section":"Actions"}}},{"node":{"id":"b9211092-cfae-59bc-93cf-8aaf1efc24b8","frontmatter":{"title":"EaseTo","path":"/docs/actions-ease","section":"Actions"}}},{"node":{"id":"8e050c66-f7d6-5f19-a8f8-f9d5ccb40a3a","frontmatter":{"title":"MoveTo/MoveBy","path":"/docs/actions-move","section":"Actions"}}},{"node":{"id":"8b3ef123-400d-53a7-9488-b70bba3d0990","frontmatter":{"title":"Fade","path":"/docs/actions-fade","section":"Actions"}}},{"node":{"id":"2d3f2cfb-4119-59ca-8b96-a3b8f097ba43","frontmatter":{"title":"RotateTo/RotateBy","path":"/docs/actions-rotate","section":"Actions"}}},{"node":{"id":"5f7f0cfe-b384-5ecd-8d8b-885762a265c6","frontmatter":{"title":"Repeat","path":"/docs/actions-repeat","section":"Actions"}}},{"node":{"id":"00220f48-0a05-5a8c-99dc-ed6f4772418f","frontmatter":{"title":"Die","path":"/docs/actions-die","section":"Actions"}}},{"node":{"id":"70540dde-8d21-5198-ba4c-c8bc86bffc54","frontmatter":{"title":"Follow","path":"/docs/actions-follow","section":"Actions"}}},{"node":{"id":"1adf281e-d968-5d03-b8e7-8f71391ddfe5","frontmatter":{"title":"Meet","path":"/docs/actions-meet","section":"Actions"}}},{"node":{"id":"6a0b5de9-211f-52d0-90c8-7126e4859ddf","frontmatter":{"title":"ScaleTo/ScaleBy","path":"/docs/actions-scale","section":"Actions"}}},{"node":{"id":"8245c2c2-3dda-5161-8a63-b8a7e34d9c8d","frontmatter":{"title":"Isometric TileMaps","path":"/docs/isometric","section":"TileMaps"}}},{"node":{"id":"ddb7a109-235b-5575-9a8c-5b0fde25f72b","frontmatter":{"title":"Matrix","path":"/docs/matrix","section":"Math"}}},{"node":{"id":"b9a32410-4aaa-592c-903b-f93aa5b86f20","frontmatter":{"title":"Random","path":"/docs/random","section":"Math"}}},{"node":{"id":"c33af30d-0492-5a02-9609-edb273218a8d","frontmatter":{"title":"Ray","path":"/docs/ray","section":"Math"}}},{"node":{"id":"a0b255f8-1cc0-5b77-9e64-0ece28897ce9","frontmatter":{"title":"TileMap","path":"/docs/tilemap","section":"TileMaps"}}},{"node":{"id":"4c417240-3f88-53ba-99e1-025121496738","frontmatter":{"title":"Vector","path":"/docs/vector","section":"Math"}}},{"node":{"id":"4f5f05f5-5f3f-5a16-a3b3-ab1dd405429a","frontmatter":{"title":"Physics","path":"/docs/physics","section":"Physics"}}},{"node":{"id":"fd65067f-eb2d-58bd-8bef-2e3f34e3050a","frontmatter":{"title":"Fixed Update","path":"/docs/fixed-update","section":"Physics"}}},{"node":{"id":"35f3f730-c264-51c9-a873-f4f818cc7559","frontmatter":{"title":"Bodies","path":"/docs/bodies","section":"Physics"}}},{"node":{"id":"e79b1c68-d688-587d-a190-ffb310ad3b97","frontmatter":{"title":"Colliders","path":"/docs/colliders","section":"Physics"}}},{"node":{"id":"38a5696d-430d-57d2-9e58-c3887e365415","frontmatter":{"title":"Collision Events","path":"/docs/collision-events","section":"Physics"}}},{"node":{"id":"0735bbe6-3d12-5f87-bb6d-1433223fed6c","frontmatter":{"title":"Collision Groups","path":"/docs/collisiongroups","section":"Physics"}}},{"node":{"id":"ac835bf3-7993-5495-ad2c-a80a3051bce4","frontmatter":{"title":"Collision Types","path":"/docs/collisiontypes","section":"Physics"}}},{"node":{"id":"2114efbb-02cb-5c57-b9e9-d1cb1306d433","frontmatter":{"title":"Ray Casting","path":"/docs/raycast","section":"Physics"}}},{"node":{"id":"b67a6f9e-f390-5469-9653-1fc75298cd06","frontmatter":{"title":"Input","path":"/docs/input","section":"Input"}}},{"node":{"id":"5f547a14-ebaf-576d-bff0-1cc04f5173c7","frontmatter":{"title":"Keyboard","path":"/docs/keyboard","section":"Input"}}},{"node":{"id":"8e683857-b44d-5d10-8e83-facf24a8e7c0","frontmatter":{"title":"Pointers","path":"/docs/pointers","section":"Input"}}},{"node":{"id":"5286dacc-f819-5aba-b761-713e3e649064","frontmatter":{"title":"Gamepad","path":"/docs/gamepad","section":"Input"}}},{"node":{"id":"f779f9a5-0576-5c95-bc23-b2b6377355d8","frontmatter":{"title":"Input Mapper","path":"/docs/input-mapper","section":"Input"}}},{"node":{"id":"8a130edb-7ac8-58f6-a2e4-344eb37c2bb8","frontmatter":{"title":"Migration","path":"/docs/migration","section":"Migration Guides"}}},{"node":{"id":"75de5b14-9428-5a4d-9e05-186af96b5456","frontmatter":{"title":"Debugging Tips","path":"/docs/debugging","section":"Other"}}},{"node":{"id":"b8312b83-f50b-5e03-a0ef-fcfe2d88027f","frontmatter":{"title":"Events","path":"/docs/events","section":"Other"}}},{"node":{"id":"a1aeaced-120d-570b-a141-6476312651fb","frontmatter":{"title":"Patterns","path":"/docs/patterns","section":"Other"}}},{"node":{"id":"783792ad-d1cc-5d0e-a737-e73512ab6a0b","frontmatter":{"title":"Timers","path":"/docs/timers","section":"Other"}}},{"node":{"id":"cfb9538b-f7f0-501c-9c10-e037005325d1","frontmatter":{"title":"Triggers","path":"/docs/triggers","section":"Other"}}},{"node":{"id":"01ad41f7-cf7e-55ad-9930-e4d08edaa8ed","frontmatter":{"title":"Clock","path":"/docs/clock","section":"Fundamentals"}}},{"node":{"id":"aa75522b-40c9-580f-adf0-e71e31fccd5a","frontmatter":{"title":"PostProcessors","path":"/docs/postprocessors","section":"Graphics"}}},{"node":{"id":"1ab8bc77-ef47-519a-85c9-ec04a252e70f","frontmatter":{"title":"UI","path":"/docs/ui","section":"Other"}}},{"node":{"id":"b16467e8-8826-56b8-b6b9-41dfc0d20763","frontmatter":{"title":"Particles","path":"/docs/particles","section":"Other"}}},{"node":{"id":"28a19bd1-1999-5b75-8935-540870ed3958","frontmatter":{"title":"Performance","path":"/docs/performance","section":"Other"}}},{"node":{"id":"f6a67a64-82f9-55dd-a25c-2918f73e5fa3","frontmatter":{"title":"Aseprite plugin","path":"/docs/aseprite-plugin","section":"Plugins"}}},{"node":{"id":"0e0956e2-d260-53c9-84fc-dde778da48d8","frontmatter":{"title":"Tiled Plugin","path":"/docs/tiled-plugin","section":"Plugins"}}},{"node":{"id":"61e82f66-9054-587d-a796-318af9ed99de","frontmatter":{"title":"Dev Tool","path":"/docs/devtool","section":"Plugins"}}},{"node":{"id":"425459c5-fbe5-5e57-b70f-32397e00d3fc","frontmatter":{"title":"Hosting Excalibur Games","path":"/docs/hosting","section":"Other"}}},{"node":{"id":"87b07ea3-8d34-5617-b0d1-7aeffdf0094b","frontmatter":{"title":"Custom Renderer Plugins","path":"/docs/custom-renderer-plugins","section":"Graphics"}}},{"node":{"id":"ed65a418-625a-5a66-b2b2-55ebccb2f1d0","frontmatter":{"title":"Utilities","path":"/docs/utilities","section":"Other"}}}]},"page":{"body":"\n## Mouse and Touch\n\nExcalibur handles mouse and touch input using a [[Pointers]] API that closely follows the [W3C Pointer Events](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events) spec. Excalibur normalizes mouse and touch events to a [[PointerEvent]]\nthat your game can subscribe to and handle ([[Engine.input|engine.input.pointers]]`).\n\nThere is always at least one [[Pointer]] available ([[Pointers.primary]]) and\nyou can request multiple pointers to support multi-touch scenarios.\n\nSince [[Pointers.primary]] normalizes both mouse and touch events, your game\nautomatically supports touch for the primary pointer by default. When\nyou handle the events, you can customize what your game does based on the type\nof pointer, if applicable.\n\n<Note>\n\nFor performance reasons,\n\n<em>\n\nactors do not automatically capture pointer events\n\n<a href=\"#actor-pointer-events\">\n\nuntil they are opted-in\n\n</a>\n\n.\n\n</em>\n\n</Note>\n\n### Pointer Events\n\nYou can subscribe to pointer events through `engine.input.pointers.on`. A [[PointerEvent]] object is\npassed to your handler which offers information about the pointer input being received.\n\n- `down` - When a pointer is pressed down (any mouse button or finger press)\n- `up` - When a pointer is lifted\n- `move` - When a pointer moves (be wary of performance issues when subscribing to this)\n- `cancel` - When a pointer event is canceled for some reason\n\n```js\nengine.input.pointers.primary.on('down', function (evt) {})\nengine.input.pointers.primary.on('up', function (evt) {})\nengine.input.pointers.primary.on('move', function (evt) {})\nengine.input.pointers.primary.on('cancel', function (evt) {})\n```\n\n#### Wheel Event\n\nYou can also subscribe to the mouse wheel event through `engine.input.pointers.on`. A [[WheelEvent]]\nobject is passed to your handler which offers information about the wheel event being received.\n\n- `wheel` - When a mousewheel is activated (trackpad scroll or mouse wheel)\n\n```js\nengine.input.pointers.on('wheel', function (evt) {})\n```\n\n### Last position querying\n\nIf you don't wish to subscribe to events, you can also access the [[Pointer.lastPagePos]], [[Pointer.lastScreenPos]]\nor [[Pointer.lastWorldPos]] coordinates ([[Vector]]) on the pointer you're targeting.\n\n```js\nengine.input.pointers.primary.lastPagePos\nengine.input.pointers.primary.lastScreenPos\nengine.input.pointers.primary.lastWorldPos\n```\n\nNote that the value may be `null` if the Pointer was not active the last frame.\n\n### Pointer scope (window vs. canvas)\n\nYou have the option to handle _all_ pointer events in the browser by setting\n[[EngineOptions.pointerScope]] to [[PointerScope.Document]]. If this is enabled,\n\nExcalibur will handle every pointer event in the browser. This is useful for handling\ncomplex input and having control over every interaction.\n\nYou can also use [[PointerScope.Canvas]] to only scope event handling to the game\ncanvas. This is useful if you don't care about events that occur outside the game.\n\nOne real-world example is dragging and gestures. Sometimes a player will drag their\nfinger outside your game and then into it, expecting it to work. If [[PointerScope]]\nis set to [[PointerScope.Canvas|Canvas]] this will not work. If it is set to\n[[PointerScope.Document|Document]], it will.\n\n### Responding to input\n\nThe primary pointer can be a mouse, stylus, or single finger touch event. You\ncan inspect what type of pointer it is from the [[PointerEvent]] handled.\n\n```js\nengine.input.pointers.primary.on('down', function (pe) {\n  if (pe.pointerType === ex.Input.PointerType.Mouse) {\n    ex.Logger.getInstance().info('Mouse event:', pe)\n  } else if (pe.pointerType === ex.Input.PointerType.Touch) {\n    ex.Logger.getInstance().info('Touch event:', pe)\n  }\n})\n```\n\n### Multiple Pointers (Multi-Touch)\n\nWhen there is more than one pointer detected on the screen,\nthis is considered multi-touch. For example, pressing one finger,\nthen another, will create two pointers. If you lift a finger,\nthe first one remains and the second one disappears.\n\nYou can handle multi-touch by subscribing to however many pointers\nyou would like to support. If a pointer doesn't yet exist, it will\nbe created. You do not need to check if a pointer exists. If it does\nexist, it will propagate events, otherwise it will remain idle.\n\nExcalibur does not impose a limit to the amount of pointers you can\nsubscribe to, so by all means, support all 10 fingers.\n\n_Note:_ There is no way to identify touches after they happen; you can only\nknow that there are _n_ touches on the screen at once.\n\n```js\nfunction paint(color) {\n  // create a handler for the event\n  return function (pe) {\n    if (pe.pointerType === ex.Input.PointerType.Touch) {\n      engine.canvas.fillStyle = color\n      engine.canvas.fillRect(pe.x, pe.y, 5, 5)\n    }\n  }\n}\nengine.input.pointers.at(0).on('move', paint('blue')) // 1st finger\nengine.input.pointers.at(1).on('move', paint('red')) // 2nd finger\nengine.input.pointers.at(2).on('move', paint('green')) // 3rd finger\n```\n\n### Actor pointer events\n\nBy default, [actors](/docs/actors) do not participate in pointer events. In other\nwords, when you \"click\" an Actor, it will not throw an event **for that Actor**,\nonly a generic pointer event for the game. This is to keep performance\nhigh and allow actors to \"opt-in\" to handling pointer events. Actors will automatically\nopt-in if a pointer related event handler is set on them `actor.on(\"pointerdown\", () => {})` for example.\n\nTo opt-in manually, set [[Actor.enableCapturePointer]] to `true` and the [[Actor]] will\nstart publishing `pointerup` and `pointerdown` events. `pointermove` events\nwill not be published by default due to performance implications. If you want\nan actor to receive move events, set [[CapturePointerConfig.captureMoveEvents]] to\n`true`.\n\nActor pointer events will be prefixed with `pointer`.\n\n```js\nconst player = new ex.Actor()\n// enable propagating pointer events\nplayer.enableCapturePointer = true\n// enable move events, warning: performance intensive!\nplayer.capturePointer.captureMoveEvents = true\n// subscribe to input\nplayer.on('pointerup', function (ev) {\n  player.logger.info('Player selected!', ev)\n})\n```\n\n#### Actor Events\n\nActors have the following **extra** events you can subscribe to:\n\n- `pointerenter` - When a pointer enters the bounds of an actor\n- `pointerleave` - When a pointer leaves the bounds of an actor\n- `pointerdragstart` - When a pointer starts a drag on an actor\n- `pointerdragmove` - When a pointer drags an actor\n- `pointerdragend` - When a pointer ends a drag on an actor\n\n## Gamepads and Controllers\n\nYou can query any [[Gamepad|Gamepads]] that are connected or listen to events (\"button\" and \"axis\").\n\nHTML5 Gamepad API only supports a maximum of 4 gamepads. You can access them using the [[Gamepads.at]] method. If a [[Gamepad]] is\nnot connected, it will simply not throw events.\n\nThe gamepad can be accessed off of the engine\n\n```typescript\nconst game = new ex.Engine({...});\nconst gamepad1 = game.input.gamepads.at(0);\n\n// retrieve buttons\nconst dpadRight = gamepad1.getButton(ex.Buttons.DpadRight);\nconst face1 = gamepad1.getButton(ex.Buttons.Face1);\n\n// joysticks\nconst leftJoyX = gamepad1.getAxes(ex.Axes.LeftStickX);\nconst leftJoyY = gamepad1.getAxes(ex.Axes.LeftStickY);\n\n// was a button pressed?\ngamepad1.isButtonPressed(ex.Buttons.DpadRight);\ngamepad1.isButtonHeld(ex.Buttons.DpadRight);\ngamepad1.wasButtonPressed(ex.Buttons.DpadRight);\n\n\n// listen to events\ngamepad1.on('connect', (ev: GamepadConnectEvent) => {...}); // game pad connected\ngamepad1.on('disconnect', (ev: GamepadDisconnectEvent) => {...}); // game pad disconnected\ngamepad1.on('button', (ev: GamepadButtonEvent) => {}); // button pressed\ngamepad1.on('axis', (ev: GamepadAxisEvent) => {}); // axis changed\n\n```\n\n## Minimum Controller Requirements\n\nThe variety of controllers is vast, and a lot of devices may present as a controller to the controller api that you do not want to support in your game.\n\nYou can use the minimum controller requirement to filter out controllers that are unsuitable for your game.\n\n```typescript\nconst game = new ex.Engine({...});\ngame.input.gamepads.setMinimumGamepadConfiguration({\n  buttons: 8,\n  axis: 2\n});\n\n```\n\n## Common Issues\n\nSometimes there is a certain amount of slack in the joysticks where the idle position does not read (0, 0). The threshold for registering input can be adjusted with the static `ex.Gamepads.MinAxisMoveThreshold = 0.1` the default is `0.05`.\n","frontmatter":{"path":"/docs/pointers","title":"Pointers","section":"Input"}}},"pageContext":{"id":"8e683857-b44d-5d10-8e83-facf24a8e7c0","frontmatter":{"title":"Pointers","path":"/docs/pointers","section":"Input"}}},"staticQueryHashes":["3287062156"],"slicesMap":{}}