{"componentChunkName":"component---src-templates-docs-page-template-js-content-file-path-docs-04-architecture-mdx","path":"/docs/engine/","result":{"data":{"github":{"data":{"repository":{"releases":{"edges":[{"node":{"publishedAt":"2023-12-12T15:10:31Z","name":"Excalibur v0.28.3 Release","tag":{"name":"v0.28.3"}}},{"node":{"publishedAt":"2023-12-02T02:40:30Z","name":"Excalibur v0.28.2 Release","tag":{"name":"v0.28.2"}}},{"node":{"publishedAt":"2023-08-11T01:36:42Z","name":"Excalibur v0.28.0 Release","tag":{"name":"v0.28.0"}}},{"node":{"publishedAt":"2022-07-09T01:19:28Z","name":"Excalibur v0.27.0 Release","tag":{"name":"v0.27.0"}}},{"node":{"publishedAt":"2022-05-21T00:49:41Z","name":"Excalibur v0.26.0 Release","tag":{"name":"v0.26.0"}}}]}}}},"toc":{"edges":[{"node":{"id":"dad98d07-474c-5672-9dc6-0347e90c6793","frontmatter":{"title":"Welcome","path":"/docs/","section":"Introduction"}}},{"node":{"id":"da624576-bb5a-579b-8759-02496b34e40a","frontmatter":{"title":"Excalibur's Philosophy","path":"/docs/goals","section":"Introduction"}}},{"node":{"id":"2e771808-9321-55e9-af67-192e7aa572e7","frontmatter":{"title":"Installation Guide","path":"/docs/installation","section":"Getting Started"}}},{"node":{"id":"7000635a-aee7-58a5-888d-0046f878975f","frontmatter":{"title":"Getting Started","path":"/docs/getting-started","section":"Getting Started"}}},{"node":{"id":"7e381e47-34bf-5983-8f8a-23cf08fa51a4","frontmatter":{"title":"Build & Bundlers","path":"/docs/bundlers","section":"Getting Started"}}},{"node":{"id":"d76a770e-ba1f-523e-b91e-20478205d36b","frontmatter":{"title":"Actors","path":"/docs/actors","section":"Fundamentals"}}},{"node":{"id":"abda6651-2a20-5771-acf5-75df1b002eb8","frontmatter":{"title":"Engine Fundamentals","path":"/docs/engine","section":"Fundamentals"}}},{"node":{"id":"485c6dcb-8eca-54a2-8b93-c588d83b2de5","frontmatter":{"title":"Cameras","path":"/docs/cameras","section":"Fundamentals"}}},{"node":{"id":"81077a63-24bb-5c0c-b824-e67b0327184c","frontmatter":{"title":"Scenes","path":"/docs/scenes","section":"Fundamentals"}}},{"node":{"id":"50cfedc7-12ae-5b69-87f1-bbeb5ba25a1c","frontmatter":{"title":"DisplayModes","path":"/docs/displaymodes","section":"Screen & Viewport"}}},{"node":{"id":"41945ef9-20a8-57a2-a98f-8c65910a4146","frontmatter":{"title":"Screen & Viewport","path":"/docs/screens","section":"Screen & Viewport"}}},{"node":{"id":"d3d0686a-208c-5965-a7fe-bdd370ec06b9","frontmatter":{"title":"Color","path":"/docs/color","section":"Graphics"}}},{"node":{"id":"8e8a130d-da7f-52bd-9f5b-edca962a2e43","frontmatter":{"title":"Graphics","path":"/docs/graphics","section":"Graphics"}}},{"node":{"id":"2711c428-18f5-5a66-833a-b952df2e1a7e","frontmatter":{"title":"Lines","path":"/docs/lines","section":"Graphics"}}},{"node":{"id":"08e17b5e-202e-56d4-950b-09ace0312d74","frontmatter":{"title":"Sprites","path":"/docs/sprites","section":"Graphics"}}},{"node":{"id":"857b3684-3e57-5975-879e-ae2270543839","frontmatter":{"title":"Spritesheets","path":"/docs/spritesheets","section":"Graphics"}}},{"node":{"id":"fcf36edc-32a3-57aa-ad00-391494f7766b","frontmatter":{"title":"Text & Fonts","path":"/docs/text","section":"Graphics"}}},{"node":{"id":"91be0486-77db-5548-ab44-fd6e02d73284","frontmatter":{"title":"Animation","path":"/docs/animation","section":"Graphics"}}},{"node":{"id":"9c76d3f3-5289-5d6b-a176-1f346d2e621b","frontmatter":{"title":"Canvas","path":"/docs/canvas","section":"Graphics"}}},{"node":{"id":"a69a38dd-0055-5d88-abf7-43f8b7062d4c","frontmatter":{"title":"Graphics Component","path":"/docs/graphics-component","section":"Graphics"}}},{"node":{"id":"a01c37b7-e332-5c7e-b4d8-de9bd992ec43","frontmatter":{"title":"Graphics Group","path":"/docs/graphics-group","section":"Graphics"}}},{"node":{"id":"eb15a261-5762-51d2-97f1-9cf4b32c9693","frontmatter":{"title":"Material","path":"/docs/material","section":"Graphics"}}},{"node":{"id":"fbe8508e-5a7e-57bc-a029-f07acedfd969","frontmatter":{"title":"Graphics Context","path":"/docs/graphics-context","section":"Graphics"}}},{"node":{"id":"bf6363fc-32f2-5161-a842-dec6b9c8934c","frontmatter":{"title":"Parallax","path":"/docs/parallax","section":"Graphics"}}},{"node":{"id":"f1efbb7b-69f5-5f8f-9391-21b21f9598cd","frontmatter":{"title":"ECS","path":"/docs/entity-component-system","section":"Entity Component System"}}},{"node":{"id":"cafde7bd-f517-5362-95ec-6b4bf7ca80bb","frontmatter":{"title":"ImageSource","path":"/docs/imagesource","section":"Resources"}}},{"node":{"id":"a0f02255-f693-5966-844b-4b5cb567a231","frontmatter":{"title":"Loader","path":"/docs/loader","section":"Resources"}}},{"node":{"id":"53e76878-d0d8-55ef-9f8a-7bb0a50a5fe2","frontmatter":{"title":"Sound","path":"/docs/sound","section":"Resources"}}},{"node":{"id":"7c26d3e6-ced4-529f-9ae8-95a9c18965a7","frontmatter":{"title":"Entities","path":"/docs/entities","section":"Entity Component System"}}},{"node":{"id":"95d94e6c-6505-5c46-92c2-d0fd2796c66d","frontmatter":{"title":"Components","path":"/docs/components","section":"Entity Component System"}}},{"node":{"id":"407163b4-4a21-591c-8268-32feb2794249","frontmatter":{"title":"Systems","path":"/docs/systems","section":"Entity Component System"}}},{"node":{"id":"5b732b02-0afa-532b-971b-7b81950067c0","frontmatter":{"title":"Queries","path":"/docs/queries","section":"Entity Component System"}}},{"node":{"id":"f95325ef-9ad4-5e99-a69d-c00f14774b76","frontmatter":{"title":"Actions","path":"/docs/actions","section":"Actions"}}},{"node":{"id":"f27b1e7d-dccc-5f6b-9ee9-12c92799a241","frontmatter":{"title":"Blink","path":"/docs/actions-blink","section":"Actions"}}},{"node":{"id":"3245878c-014c-5ab9-be83-3e515eff5937","frontmatter":{"title":"CallMethod","path":"/docs/actions-callmethod","section":"Actions"}}},{"node":{"id":"ab4d5e09-8c48-522a-9417-436fd08502f6","frontmatter":{"title":"Parallel Actions","path":"/docs/actions-parallel","section":"Actions"}}},{"node":{"id":"2c8793b5-2707-5118-9c0a-506a8f4ddb49","frontmatter":{"title":"Delay","path":"/docs/actions-delay","section":"Actions"}}},{"node":{"id":"b9211092-cfae-59bc-93cf-8aaf1efc24b8","frontmatter":{"title":"EaseTo","path":"/docs/actions-ease","section":"Actions"}}},{"node":{"id":"8e050c66-f7d6-5f19-a8f8-f9d5ccb40a3a","frontmatter":{"title":"MoveTo/MoveBy","path":"/docs/actions-move","section":"Actions"}}},{"node":{"id":"8b3ef123-400d-53a7-9488-b70bba3d0990","frontmatter":{"title":"Fade","path":"/docs/actions-fade","section":"Actions"}}},{"node":{"id":"2d3f2cfb-4119-59ca-8b96-a3b8f097ba43","frontmatter":{"title":"RotateTo/RotateBy","path":"/docs/actions-rotate","section":"Actions"}}},{"node":{"id":"5f7f0cfe-b384-5ecd-8d8b-885762a265c6","frontmatter":{"title":"Repeat","path":"/docs/actions-repeat","section":"Actions"}}},{"node":{"id":"00220f48-0a05-5a8c-99dc-ed6f4772418f","frontmatter":{"title":"Die","path":"/docs/actions-die","section":"Actions"}}},{"node":{"id":"70540dde-8d21-5198-ba4c-c8bc86bffc54","frontmatter":{"title":"Follow","path":"/docs/actions-follow","section":"Actions"}}},{"node":{"id":"1adf281e-d968-5d03-b8e7-8f71391ddfe5","frontmatter":{"title":"Meet","path":"/docs/actions-meet","section":"Actions"}}},{"node":{"id":"6a0b5de9-211f-52d0-90c8-7126e4859ddf","frontmatter":{"title":"ScaleTo/ScaleBy","path":"/docs/actions-scale","section":"Actions"}}},{"node":{"id":"8245c2c2-3dda-5161-8a63-b8a7e34d9c8d","frontmatter":{"title":"Isometric TileMaps","path":"/docs/isometric","section":"TileMaps"}}},{"node":{"id":"ddb7a109-235b-5575-9a8c-5b0fde25f72b","frontmatter":{"title":"Matrix","path":"/docs/matrix","section":"Math"}}},{"node":{"id":"b9a32410-4aaa-592c-903b-f93aa5b86f20","frontmatter":{"title":"Random","path":"/docs/random","section":"Math"}}},{"node":{"id":"c33af30d-0492-5a02-9609-edb273218a8d","frontmatter":{"title":"Ray","path":"/docs/ray","section":"Math"}}},{"node":{"id":"a0b255f8-1cc0-5b77-9e64-0ece28897ce9","frontmatter":{"title":"TileMap","path":"/docs/tilemap","section":"TileMaps"}}},{"node":{"id":"4c417240-3f88-53ba-99e1-025121496738","frontmatter":{"title":"Vector","path":"/docs/vector","section":"Math"}}},{"node":{"id":"4f5f05f5-5f3f-5a16-a3b3-ab1dd405429a","frontmatter":{"title":"Physics","path":"/docs/physics","section":"Physics"}}},{"node":{"id":"fd65067f-eb2d-58bd-8bef-2e3f34e3050a","frontmatter":{"title":"Fixed Update","path":"/docs/fixed-update","section":"Physics"}}},{"node":{"id":"35f3f730-c264-51c9-a873-f4f818cc7559","frontmatter":{"title":"Bodies","path":"/docs/bodies","section":"Physics"}}},{"node":{"id":"e79b1c68-d688-587d-a190-ffb310ad3b97","frontmatter":{"title":"Colliders","path":"/docs/colliders","section":"Physics"}}},{"node":{"id":"38a5696d-430d-57d2-9e58-c3887e365415","frontmatter":{"title":"Collision Events","path":"/docs/collision-events","section":"Physics"}}},{"node":{"id":"0735bbe6-3d12-5f87-bb6d-1433223fed6c","frontmatter":{"title":"Collision Groups","path":"/docs/collisiongroups","section":"Physics"}}},{"node":{"id":"ac835bf3-7993-5495-ad2c-a80a3051bce4","frontmatter":{"title":"Collision Types","path":"/docs/collisiontypes","section":"Physics"}}},{"node":{"id":"2114efbb-02cb-5c57-b9e9-d1cb1306d433","frontmatter":{"title":"Ray Casting","path":"/docs/raycast","section":"Physics"}}},{"node":{"id":"b67a6f9e-f390-5469-9653-1fc75298cd06","frontmatter":{"title":"Input","path":"/docs/input","section":"Input"}}},{"node":{"id":"5f547a14-ebaf-576d-bff0-1cc04f5173c7","frontmatter":{"title":"Keyboard","path":"/docs/keyboard","section":"Input"}}},{"node":{"id":"8e683857-b44d-5d10-8e83-facf24a8e7c0","frontmatter":{"title":"Pointers","path":"/docs/pointers","section":"Input"}}},{"node":{"id":"5286dacc-f819-5aba-b761-713e3e649064","frontmatter":{"title":"Gamepad","path":"/docs/gamepad","section":"Input"}}},{"node":{"id":"f779f9a5-0576-5c95-bc23-b2b6377355d8","frontmatter":{"title":"Input Mapper","path":"/docs/input-mapper","section":"Input"}}},{"node":{"id":"8a130edb-7ac8-58f6-a2e4-344eb37c2bb8","frontmatter":{"title":"Migration","path":"/docs/migration","section":"Migration Guides"}}},{"node":{"id":"75de5b14-9428-5a4d-9e05-186af96b5456","frontmatter":{"title":"Debugging Tips","path":"/docs/debugging","section":"Other"}}},{"node":{"id":"b8312b83-f50b-5e03-a0ef-fcfe2d88027f","frontmatter":{"title":"Events","path":"/docs/events","section":"Other"}}},{"node":{"id":"a1aeaced-120d-570b-a141-6476312651fb","frontmatter":{"title":"Patterns","path":"/docs/patterns","section":"Other"}}},{"node":{"id":"783792ad-d1cc-5d0e-a737-e73512ab6a0b","frontmatter":{"title":"Timers","path":"/docs/timers","section":"Other"}}},{"node":{"id":"cfb9538b-f7f0-501c-9c10-e037005325d1","frontmatter":{"title":"Triggers","path":"/docs/triggers","section":"Other"}}},{"node":{"id":"01ad41f7-cf7e-55ad-9930-e4d08edaa8ed","frontmatter":{"title":"Clock","path":"/docs/clock","section":"Fundamentals"}}},{"node":{"id":"aa75522b-40c9-580f-adf0-e71e31fccd5a","frontmatter":{"title":"PostProcessors","path":"/docs/postprocessors","section":"Graphics"}}},{"node":{"id":"1ab8bc77-ef47-519a-85c9-ec04a252e70f","frontmatter":{"title":"UI","path":"/docs/ui","section":"Other"}}},{"node":{"id":"b16467e8-8826-56b8-b6b9-41dfc0d20763","frontmatter":{"title":"Particles","path":"/docs/particles","section":"Other"}}},{"node":{"id":"28a19bd1-1999-5b75-8935-540870ed3958","frontmatter":{"title":"Performance","path":"/docs/performance","section":"Other"}}},{"node":{"id":"f6a67a64-82f9-55dd-a25c-2918f73e5fa3","frontmatter":{"title":"Aseprite plugin","path":"/docs/aseprite-plugin","section":"Plugins"}}},{"node":{"id":"0e0956e2-d260-53c9-84fc-dde778da48d8","frontmatter":{"title":"Tiled Plugin","path":"/docs/tiled-plugin","section":"Plugins"}}},{"node":{"id":"61e82f66-9054-587d-a796-318af9ed99de","frontmatter":{"title":"Dev Tool","path":"/docs/devtool","section":"Plugins"}}},{"node":{"id":"425459c5-fbe5-5e57-b70f-32397e00d3fc","frontmatter":{"title":"Hosting Excalibur Games","path":"/docs/hosting","section":"Other"}}},{"node":{"id":"87b07ea3-8d34-5617-b0d1-7aeffdf0094b","frontmatter":{"title":"Custom Renderer Plugins","path":"/docs/custom-renderer-plugins","section":"Graphics"}}},{"node":{"id":"ed65a418-625a-5a66-b2b2-55ebccb2f1d0","frontmatter":{"title":"Utilities","path":"/docs/utilities","section":"Other"}}}]},"page":{"body":"\nExcalibur uses the HTML5 Canvas API for drawing your game to the screen.\nThe canvas is available to all `draw` functions for raw manipulation,\nbut Excalibur is meant to simplify or completely remove the need to use\nthe canvas directly.\n\n## Creating a game\n\nTo create a new game, create a new instance of [[Engine]] and pass in\nthe configuration ([[EngineOptions]]). Excalibur only supports a single\ninstance of a game at a time, so it is safe to use globally.\nYou can then call [[Engine.start|start]] which starts the game and optionally accepts\na [[Loader]] which you can use to [load assets](/docs/assets) like sprites and sounds.\n\n```js\nconst game = new ex.Engine({\n  width: 800, // the width of the canvas\n  height: 600, // the height of the canvas\n  canvasElementId: '', // the DOM canvas element ID, if you are providing your own\n  displayMode: ex.DisplayMode.FitScreen, // the display mode\n  pointerScope: ex.PointerScope.Document, // the scope of capturing pointer (mouse/touch) events\n})\n// call game.start, which is a Promise\ngame.start().then(function () {\n  // ready, set, go!\n})\n```\n\nYou would include your script (or [bundle it](/docs/installation#module-loaders-and-bundlers)) on an HTML page and that page does _not need anything else_.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Cool Game!</title>\n  </head>\n  <body>\n    <script src=\"game.js\"></script>\n  </body>\n</html>\n```\n\nExcalibur can automatically generate a `<canvas>` element for you or you can provide your own using [[EngineOptions.canvasElementId]].\n\n## The main loop\n\nThe Excalibur engine uses a simple main loop. The engine updates and renders\nthe \"scene graph\" which is the [[Scene|scenes]] and the tree of [[Actor|actors]] within that\nscene. Only one [[Scene]] can be active at a time. The engine does not update/draw any other\nscene, which means any actors will not be updated/drawn if they are part of a deactivated scene.\n![Engine Lifecycle](/assets/images/docs/EngineLifecycle.png)\n\n**Scene Graph**\n\n```\nEngine\n  |_ Scene 1 (activated)\n    |_ Actor 1\n      |_ Child Actor 1\n    |_ Actor 2\n  |_ Scene 2 (deactivated)\n  |_ Scene 3 (deactivated)\n```\n\nThe engine splits the game into two primary responsibilities: updating and drawing. This is\nto keep your game smart about splitting duties so that you aren't drawing when doing\nlogic or performing logic as you draw.\n\n### Update loop\n\nThe first operation run is the **Update** loop. Actors and scenes both implement\nan overridable/extendable `onPreUpdate` and `onPostUpdate` methods. Use them to perform any logic-based operations\nin your game for a particular class.\n\n### Draw loop\n\nThe next step is the **Draw** loop. A scene loops through its child actors and\ndraws each one. You can override the `onPreDraw` and `onPostDraw` methods on an actor or scene to customize their drawing.\nYou should **not** perform any logic in a draw call, it should only relate to drawing.\n\n## Working with Scenes\n\nThe engine automatically creates a \"root\" [Scene](/docs/scenes). You can use this for whatever you want.\nYou can manipulate scenes using [[Engine.add|add]], [[Engine.remove|remove]],\nand [[Engine.goToScene|goToScene]]. You can overwrite or remove the `root` scene if\nyou want. There always has to be at least one scene and only **one** scene can be\nactive at any one time.\n\nLearn more about the [scene lifecycle](/docs/scenes#scene-lifecycle).\n\n### Adding a scene\n\n```js\nconst game = new ex.Engine()\n// create a new level\nconst level1 = new ex.Scene()\n// add level 1 to the game\ngame.add('level1', level1)\n// in response to user input, go to level 1\ngame.goToScene('level1')\n// go back to main menu\ngame.goToScene('root')\n```\n\n### Accessing the current scene\n\nTo add actors and other entities to the current scene, you can use [[Engine.add|add]]. Alternatively,\nyou can use [[Engine.currentScene]] to directly access the current scene.\n\n## Constructor arguments\n\nIn Excalibur there are option bag constructors available on most types. These support any public property or member, **methods are not supported.** The API documentation does not provide an exhaustive list of possible properties but a list of commonly used properties.\n\nFor example instead of doing this:\n\n```typescript\nconst actor = new ex.Actor(1, 2, 100, 100, ex.Color.Red)\nactor.body.collisionType = ex.CollisionType.Active\n```\n\nThis is possible:\n\n```typescript\nconst options: ActorArgs = {\n   pos: new ex.Vector(1,2);\n   width: 100,\n   height: 100,\n   color: ex.Color.Red,\n}\n\nconst actor = new ex.Actor(options);\nactor.body.collisionType = ex.CollisionType.Active;\n```\n\nIn fact you can create a duplicate this way\n\n```typescript\nconst actor = new ex.Actor({\n  pos: new ex.Vector(1, 2),\n})\nconst actorClone = new ex.Actor(actor)\n\nexpect(actor.pos).toBe(actorClone.pos) // true;\n```\n\nTypes that support option bags can have their properties mass assigned using the assign method.\n\n```typescript\nconst actor = new ex.Actor(options)\n\nactor.assign({\n  pos: new ex.Vector(100, 100),\n  width: 1000,\n  color: ex.Color.Red,\n})\n```\n\n## Extending the engine\n\nFor complex games, any entity that inherits [[Class]] can be extended to override built-in\nfunctionality. This is recommended for [[Actor|actors]] and [[Scene|scenes]], especially.\nYou can customize the options or provide more for your game by extending [[Engine]].\n\n```ts\nclass Game extends ex.Engine {\n  constructor() {\n    super({ width: 800, height: 600, displayMode: DisplayMode.FitScreen })\n  }\n\n  public start() {\n    // add custom scenes\n    this.add('mainmenu', new MainMenu())\n    return super.start(myLoader).then(() => {\n      this.goToScene('mainmenu')\n      // custom start-up\n    })\n  }\n}\nconst game = new Game()\ngame.start()\n```\n\n## Event handling\n\nWhen working with events, be sure to keep in mind the order of subscriptions\nand try not to create a situation that requires specific things to happen in\norder. Events are best used for input events, tying together disparate objects,\nor for UI updates.\n\nExcalibur events follow the convention that the name of the thrown event for listening\nwill be the same as the Event object in all lower case with the 'Event' suffix removed.\n\nFor example:\n\n- PreDrawEvent event object and \"predraw\" as the event name\n\n```typescript\nactor.on('predraw', (evtObj: PreDrawEvent) => {\n  // do some pre drawing\n})\n```\n\n### Example: Actor events\n\nActors implement an EventDispatcher ([[Actor.eventDispatcher]]) so they can\nsend and receive events. For example, they can enable Pointer events (mouse/touch)\nand you can respond to them by subscribing to the event names.\nYou can also emit any other kind of event for your game just by using a custom\n`string` value and implementing a class that inherits from [[GameEvent]].\n\n```js\nvar player = new ex.Actor(...);\n\n// Enable pointer events for this actor\nplayer.enableCapturePointer = true;\n// subscribe to pointerdown event\nplayer.on(\"pointerdown\", function (evt: ex.PointerEvent) {\n  console.log(\"Player was clicked!\");\n});\n// turn off subscription\nplayer.off(\"pointerdown\");\n// subscribe to custom event\nplayer.on(\"death\", function (evt) {\n  console.log(\"Player died:\", evt);\n});\n// trigger custom event\nplayer.emit(\"death\", new DeathEvent());\n```\n\n### Example: Pub/Sub with Excalibur\n\nYou can also create an EventDispatcher for any arbitrary object, for example\na global game event aggregator (shown below as `vent`). Anything in your game can subscribe to\nit, if the event aggregator is in the global scope.\n_Warning:_ This can easily get out of hand. Avoid this usage, it just serves as\nan example.\n\n```js\n// create a publisher on an empty object\nvar vent = new ex.EventDispatcher({})\n// handler for an event\nvar subscription = function (event) {\n  console.log(event)\n}\n// add a subscription\nvent.on('someevent', subscription)\n// publish an event somewhere in the game\nvent.emit('someevent', new ex.GameEvent())\n```\n\n## Managing game state\n\nExcalibur does not provide any out-of-the-box way to manage game state but typically you can either use class properties or introduce something more sophisticated like a [state machine](https://github.com/davidkpiano/xstate).\n\nThe benefit of something like a state machine is that state can be separated from the actions an actor may take and you can then _save_ and _load_ state more easily to enable save game management. You could choose for example to have a global game state that you can serialize and deserialize.\n\n<Note>\n\nHave you implemented state management in your Excalibur game? [Let us know](https://github.com/excaliburjs/Excalibur#questions)!\n\n</Note>\n\n## Enabling debug mode\n\nCall [[Engine.showDebug]] with a `true` or `false` to enable or disable Excalibur's debug feature. This will enable [actor debug drawing](/docs/actors#debug-draw) to help diagnose drawing issues.\n","frontmatter":{"path":"/docs/engine","title":"Engine Fundamentals","section":"Fundamentals"}}},"pageContext":{"id":"abda6651-2a20-5771-acf5-75df1b002eb8","frontmatter":{"title":"Engine Fundamentals","path":"/docs/engine","section":"Fundamentals"}}},"staticQueryHashes":["3287062156"],"slicesMap":{}}