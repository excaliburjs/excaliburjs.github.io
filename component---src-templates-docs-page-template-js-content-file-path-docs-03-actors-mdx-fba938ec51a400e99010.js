"use strict";(self.webpackChunkexcaliburjs_github_io=self.webpackChunkexcaliburjs_github_io||[]).push([[1830],{1899:function(n,a,s){s.r(a),s.d(a,{Head:function(){return b},default:function(){return y}});var e=s(1151),t=s(7294);function o(n){const a=Object.assign({p:"p",a:"a",h2:"h2",span:"span",code:"code",img:"img",h3:"h3",strong:"strong",em:"em"},(0,e.ah)(),n.components),{IFrameEmbed:s,Note:o}=a;return s||p("IFrameEmbed",!0),o||p("Note",!0),t.createElement(t.Fragment,null,t.createElement(a.p,null,t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html",title:"View 'Actor' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Actors")," are prebuilt Excalibur ",t.createElement(a.a,{href:"/docs/api/edge/classes/Entity.html",title:"View 'Entity' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Entities")," that come with the batteries included for most applications.\nLike ",t.createElement(a.a,{href:"/docs/api/edge/classes/TransformComponent.html",title:"View 'TransformComponent' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"position"),", ",t.createElement(a.a,{href:"/docs/api/edge/classes/MotionComponent.html",title:"View 'MotionComponent' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"velocity"),", ",t.createElement(a.a,{href:"/docs/api/edge/classes/GraphicsComponent.html",title:"View 'GraphicsComponent' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"graphics"),", and ",t.createElement(a.a,{href:"/docs/api/edge/classes/ColliderComponent.html",title:"View 'ColliderComponent' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"collision detection"),"."),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html",title:"View 'Actor' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Actors")," are the recommended way to use Excalibur, they are the primary way to show something on the screen."),"\n",t.createElement(a.p,null,"If you don't want these built-ins and you want to build only what you want, read about entities ",t.createElement(a.a,{href:"/docs/entities"},"here")),"\n",t.createElement(a.h2,{id:"basic-actors",style:{position:"relative"}},t.createElement(a.a,{href:"#basic-actors","aria-label":"basic actors permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Basic actors"),"\n",t.createElement(a.p,null,"For quick and dirty games, you can just create an instance of an ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html",title:"View 'Actor' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor"),"\nand manipulate it directly."),"\n",t.createElement(a.p,null,"Actors (and other entities) must be added to a ",t.createElement(a.a,{href:"/docs/scene"},"Scene")," to be drawn\nand updated on-screen."),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'player\'</span><span class="token punctuation">,</span> <span class="token comment">// optionally assign a name</span>\n    width<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    height<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    color<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// move the player</span>\nplayer<span class="token punctuation">.</span>vel<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">15</span>\n\n<span class="token comment">// add player to the current scene</span>\ngame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span></code></pre></div>'}})),"\n",t.createElement(s,{src:"https://excaliburjs.com/excalibur-snippets/actor/"}),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"/docs/api/edge/classes/Engine.html#add",title:"View 'Engine.add' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"game.add")," is a convenience method for adding an actor to the current scene. The equivalent verbose call is ",t.createElement(a.a,{href:"/docs/api/edge/classes/Scene.html#add",title:"View 'Scene.add' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"game.currentScene.add"),"."),"\n",t.createElement(a.h2,{id:"custom-actors",style:{position:"relative"}},t.createElement(a.a,{href:"#custom-actors","aria-label":"custom actors permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Custom actors"),"\n",t.createElement(a.p,null,'For "real-world" games, it is common to extend the ',t.createElement(a.code,null,"Actor")," class.\nThis gives you much greater control and encapsulates logic for that\nactor. This is optional, but is nice for encapsulating your specifics."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">ex</span><span class="token punctuation">.</span>Actor <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> health<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">100</span>\n  <span class="token keyword">public</span> ammo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">20</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ammo <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ammo <span class="token operator">-=</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Custom actors make it easier to hook into the actor lifecycle and encapsulate the actor's state better than a basic actor."),"\n",t.createElement(a.h2,{id:"actor-lifecycle",style:{position:"relative"}},t.createElement(a.a,{href:"#actor-lifecycle","aria-label":"actor lifecycle permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Actor lifecycle"),"\n",t.createElement(a.p,null,"An actor has a basic lifecycle that dictates how it is initialized, updated, and drawn. Once an actor is part of a\n",t.createElement(a.a,{href:"/docs/scene"},"scene"),", it will follow this lifecycle."),"\n",t.createElement(a.img,{src:"/assets/images/docs/ActorLifecycle.png",alt:"Actor Lifecycle"}),"\n",t.createElement(a.h2,{id:"updating-actors",style:{position:"relative"}},t.createElement(a.a,{href:"#updating-actors","aria-label":"updating actors permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Updating actors"),"\n",t.createElement(a.p,null,"In most games, things are happening on screen: the background is parallaxing, your hero responds to input, or enemies shoot bullets. In Excalibur, the logic that updates game state is run during the ",t.createElement(a.a,{href:"/docs/engine#engine-lifecycle"},"update loop"),". Actors are a way to encapsulate that logic, such as a ",t.createElement(a.code,null,"Player")," or ",t.createElement(a.code,null,"Enemy")," or ",t.createElement(a.code,null,"MenuButton"),". Actors can be pretty much anything!"),"\n",t.createElement(a.h3,{id:"initialization",style:{position:"relative"}},t.createElement(a.a,{href:"#initialization","aria-label":"initialization permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Initialization"),"\n",t.createElement(a.p,null,"You should override the ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#onInitialize",title:"View 'Actor.onInitialize' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.onInitialize")," method to perform any startup logic\nfor an actor (such as configuring state). ",t.createElement(a.code,null,"onInitialize")," gets called\n",t.createElement(a.strong,null,"once")," before the first frame an actor is drawn/updated. It is passed\nan instance of ",t.createElement(a.a,{href:"/docs/engine"},"Engine")," to access global state or perform coordinate math."),"\n",t.createElement(o,null,t.createElement(a.p,null,"This is the recommended way to manage startup logic for actor, ",t.createElement(a.em,null,"not")," the constructor since\nyou don't incur the cost of initialization until an actor is ready to be updated in the game.")),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">ex</span><span class="token punctuation">.</span>Actor <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> level <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">public</span> endurance <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">public</span> fortitude <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token function">onInitialize</span><span class="token punctuation">(</span>engine<span class="token operator">:</span> ex<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>endurance <span class="token operator">=</span> <span class="token number">20</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fortitude <span class="token operator">=</span> <span class="token number">16</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token function">getMaxHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">0.4</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>endurance <span class="token operator">+</span> <span class="token number">0.9</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fortitude <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">*</span> <span class="token number">1.2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"There are three ways to hook into the update loop of an actor: ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#onPreUpdate",title:"View 'Actor.onPreUpdate' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.onPreUpdate"),", ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#update",title:"View 'Actor.update' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.update")," and ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#onPostUpdate",title:"View 'Actor.onPostUpdate' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.onPostUpdate"),'. Actors (and other entities in Excalibur) all have "core" logic that runs in the update or draw loop. The pre- and post-method hooks allow you to choose when you want to run logic in each phase. ',t.createElement(a.em,null,"Normally"),' you will run logic in the "post" hook but sometimes you may want to completely override the core logic or run logic that uses state that was updated ',t.createElement(a.em,null,"before")," the core logic runs."),"\n",t.createElement(a.p,null,"All update methods are passed an instance of the Excalibur engine, which\ncan be used to perform coordinate math or access global state. It is also\npassed ",t.createElement(a.code,null,"delta")," which is the time in milliseconds since the last frame, which can be used\nto perform time-based movement or time-based math (such as a ",t.createElement(a.a,{href:"/docs/utilities"},"timer"),")."),"\n",t.createElement(o,null,t.createElement(a.p,null,"Reference ",t.createElement(a.a,{href:"#actor-lifecycle"},"Actor lifecycle")," for a breakdown of each phase and when things are executed.")),"\n",t.createElement(a.h3,{id:"update",style:{position:"relative"}},t.createElement(a.a,{href:"#update","aria-label":"update permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Update"),"\n",t.createElement(a.p,null,"You can override the core ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#update",title:"View 'Actor.update' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.update")," but it is important to call the ",t.createElement(a.code,null,"super.update(...)")," method in order to preserve the Excalibur core update implementation."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Actor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token function">update</span><span class="token punctuation">(</span>engine<span class="token operator">:</span> Engine<span class="token punctuation">,</span> delta<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Custom update here</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>engine<span class="token punctuation">,</span> delta<span class="token punctuation">)</span>\n    <span class="token comment">// Custom update here</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(o,{variant:"warning"},t.createElement(a.p,null,"Actions will not function properly if you override ",t.createElement(a.code,null,"Actor.update()")," without calling the ",t.createElement(a.code,null,"super.update()"))),"\n",t.createElement(a.h3,{id:"pre-update",style:{position:"relative"}},t.createElement(a.a,{href:"#pre-update","aria-label":"pre update permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Pre-update"),"\n",t.createElement(a.p,null,"Override the ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#onPreUpdate",title:"View 'Actor.onPreUpdate' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.onPreUpdate")," method to update the state of your actor before ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#update",title:"View 'Actor.update' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.update"),"."),"\n",t.createElement(o,null,t.createElement(a.p,null,t.createElement(a.strong,null,"Important:")," This logic will run ",t.createElement(a.em,null,"before")," the core Excalibur update logic runs, so you may not have the latest transform matrix applied or other positional information updated. Essentially you will be working with the ",t.createElement(a.em,null,"last frame's state"),".")),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Actor</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Runs before "core" update logic, before this frame is updated\n   */</span>\n  <span class="token keyword">public</span> <span class="token function">onPreUpdate</span><span class="token punctuation">(</span>engine<span class="token operator">:</span> ex<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> delta<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// update velocity</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>vel<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"post-update",style:{position:"relative"}},t.createElement(a.a,{href:"#post-update","aria-label":"post update permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Post-update"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#onPostUpdate",title:"View 'Actor.onPostUpdate' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.onPostUpdate")," is called after ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#update",title:"View 'Actor.update' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.update")," to prepare state for the ",t.createElement(a.em,null,"next")," frame. Things that need to be updated include state, drawing, or position."),"\n",t.createElement(o,null,t.createElement(a.p,null,"This is the recommended method to override for adding update logic to your actors since it runs after Excalibur has done all the update logic for the frame and before things get drawn to the screen.")),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Actor</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * RECOMMENDED: Runs after "core" update logic, before the next frame.\n   * Usually this is what you want!\n   */</span>\n  <span class="token keyword">public</span> <span class="token function">onPostUpdate</span><span class="token punctuation">(</span>engine<span class="token operator">:</span> ex<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> delta<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// check if player died</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"actor-graphics",style:{position:"relative"}},t.createElement(a.a,{href:"#actor-graphics","aria-label":"actor graphics permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Actor Graphics"),"\n",t.createElement(a.p,null,"Actors by default have no associated ",t.createElement(a.a,{href:"/docs/graphics"},"graphics"),", meaning that they will be rendered without any graphics unless you've assigned a default ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html#color",title:"View 'Actor.color' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor.color"),"."),"\n",t.createElement(a.p,null,"If an actor has a color set, it will draw a box or circle in that color, if width/height or radius is set."),"\n",t.createElement(a.p,null,"This can be useful at the beginning of development when you're just tinkering but for most games you might want to add sprites, animations, and other drawings over simple shapes."),"\n",t.createElement(a.h3,{id:"working-with-images--sprites",style:{position:"relative"}},t.createElement(a.a,{href:"#working-with-images--sprites","aria-label":"working with images  sprites permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Working with Images & Sprites"),"\n",t.createElement(a.p,null,"Think of an ",t.createElement(a.a,{href:"/docs/api/edge/classes/ImageSource.html",title:"View 'ImageSource' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"ImageSource")," as the raw image file that will be loaded into Excalibur from a url."),"\n",t.createElement(a.p,null,"In order for it to be drawn it must be converted to a ",t.createElement(a.a,{href:"/docs/graphics#sprites"},"Sprite"),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">ImageSource</span><span class="token punctuation">(</span><span class="token string">\'./path/to/image.png\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> sprite <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">toSprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nactor<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"A common pattern is to define graphics in the ",t.createElement(a.code,null,"onInitialize")),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">ImageSource</span><span class="token punctuation">(</span><span class="token string">\'./path/to/player.png\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">ex</span><span class="token punctuation">.</span>Actor <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token function">onInitialize</span><span class="token punctuation">(</span>engine<span class="token operator">:</span> ex<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// set as the "default" drawing</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">toSprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(o,null,t.createElement(a.p,null,t.createElement(a.strong,null,"Important!")," Actors have a default anchor of (0.5, 0.5) which means their graphics are positioned in their center (not top-left) by default.")),"\n",t.createElement(a.h2,{id:"drawing-hooks",style:{position:"relative"}},t.createElement(a.a,{href:"#drawing-hooks","aria-label":"drawing hooks permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Drawing hooks"),"\n",t.createElement(a.p,null,"Like ",t.createElement(a.a,{href:"#updating-actors"},"the update loop"),", the draw loop has hooks you can override to perform custom drawing."),"\n",t.createElement(a.p,null,"For drawing hooks the ",t.createElement(a.code,null,"ExcaliburGraphicsContext")," is replacing the browser ",t.createElement(a.code,null,"CanvasRenderingContext2D"),". But if you need to do some custom drawing using the ",t.createElement(a.code,null,"CanvasRenderingContext2D")," the new ",t.createElement(a.a,{href:"https://excaliburjs.com/docs/api/edge/classes/Canvas.html"},t.createElement(a.code,null,"Canvas"))," graphic has your back."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Canvas</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// If true draw once until flagged dirty again, otherwise draw every time</span>\n  <span class="token function-variable function">draw</span><span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token operator">:</span> CanvasRenderingContext2D<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">\'red\'</span>\n    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nactor<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Override the ",t.createElement(a.a,{href:"/docs/api/edge/classes/GraphicsComponent.html#onPreDraw",title:"View 'GraphicsComponent.onPreDraw' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Actor.graphics.onPreDraw")," or ",t.createElement(a.a,{href:"/docs/api/edge/classes/GraphicsComponent.html#onPostDraw",title:"View 'GraphicsComponent.onPostDraw' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Actor.graphics.onPostDraw")," methods to customize the draw logic at different points in the loop."),"\n",t.createElement(o,null,t.createElement(a.p,null,"Reference ",t.createElement(a.a,{href:"#actor-lifecycle"},"Actor lifecycle")," for a breakdown of each phase and when things are executed.")),"\n",t.createElement(a.h3,{id:"pre-draw",style:{position:"relative"}},t.createElement(a.a,{href:"#pre-draw","aria-label":"pre draw permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Pre-draw"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"/docs/api/edge/classes/GraphicsComponent.html#onPreDraw",title:"View 'GraphicsComponent.onPreDraw' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Actor.graphics.onPreDraw")," is run ",t.createElement(a.em,null,"before")," the core draw logic to prepare the frame."),"\n",t.createElement(o,null,t.createElement(a.p,null,t.createElement(a.strong,null,"Important:")," This runs ",t.createElement(a.em,null,"before")," Excalibur has run all its draw logic to apply effects, transform information, etc. so you essentially are working with the ",t.createElement(a.em,null,"last frame's draw state"),".")),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">ex</span><span class="token punctuation">.</span>Actor <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * ADVANCED: This is run before Actor.graphics.onPreDraw core logic.\n     */</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function-variable function">onPreDraw</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n      ctx<span class="token operator">:</span> ExcaliburGraphicsContext<span class="token punctuation">,</span>\n      delta<span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// custom drawing</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"post-draw",style:{position:"relative"}},t.createElement(a.a,{href:"#post-draw","aria-label":"post draw permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Post-draw"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"/docs/api/edge/classes/GraphicsComponent.html#onPostDraw",title:"View 'GraphicsComponent.onPostDraw' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Actor.graphics.onPostDraw")," is run ",t.createElement(a.em,null,"after")," the core draw and will draw in the current frame."),"\n",t.createElement(o,null,t.createElement(a.p,null,"This is the recommended method to override since Excalibur has run its core draw logic and you can now customize what gets drawn during the current frame.")),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">ex</span><span class="token punctuation">.</span>Actor <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * ADVANCED: This is run before Actor.graphics.onPreDraw core logic.\n     */</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function-variable function">onPostDraw</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n      ctx<span class="token operator">:</span> ExcaliburGraphicsContext<span class="token punctuation">,</span>\n      delta<span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// custom drawing</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"adding-actors-to-the-scene",style:{position:"relative"}},t.createElement(a.a,{href:"#adding-actors-to-the-scene","aria-label":"adding actors to the scene permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Adding actors to the scene"),"\n",t.createElement(a.p,null,"For an ",t.createElement(a.a,{href:"/docs/api/edge/classes/Actor.html",title:"View 'Actor' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Actor"),' to be drawn and updated, it needs to be part of the "scene graph".\nThe ',t.createElement(a.a,{href:"/docs/api/edge/classes/Engine.html",title:"View 'Engine' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Engine")," provides several easy ways to quickly add/remove actors from the\ncurrent scene."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> game   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Engine</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> enemy  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// add them to the "root" scene</span>\ngame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>\ngame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>enemy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// start game</span>\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"You can also add actors to a ",t.createElement(a.a,{href:"/docs/api/edge/classes/Scene.html",title:"View 'Scene' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Scene")," instance specifically."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> level1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> enemy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// add actors to level1</span>\nlevel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span>\nlevel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>enemy<span class="token punctuation">)</span>\n<span class="token comment">// add level1 to the game</span>\ngame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">\'level1\'</span><span class="token punctuation">,</span> level1<span class="token punctuation">)</span>\n<span class="token comment">// start the game</span>\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// after player clicks start game, for example</span>\ngame<span class="token punctuation">.</span><span class="token function">goToScene</span><span class="token punctuation">(</span><span class="token string">\'level1\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"collision-detection",style:{position:"relative"}},t.createElement(a.a,{href:"#collision-detection","aria-label":"collision detection permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Collision Detection"),"\n",t.createElement(a.p,null,"By default Actors do not participate in collisions. If you wish to make\nan actor participate, you need to switch from the default ",t.createElement(a.a,{href:"/docs/api/edge/enums/CollisionType.html#PreventCollision",title:"View 'CollisionType.PreventCollision' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"prevent collision"),"\nto ",t.createElement(a.a,{href:"/docs/api/edge/enums/CollisionType.html#Active",title:"View 'CollisionType.Active' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"active"),", ",t.createElement(a.a,{href:"/docs/api/edge/enums/CollisionType.html#Fixed",title:"View 'CollisionType.Fixed' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"fixed"),", or ",t.createElement(a.a,{href:"/docs/api/edge/enums/CollisionType.html#Passive",title:"View 'CollisionType.Passive' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"passive")," collision type."),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">ex<span class="token punctuation">.</span>Physics<span class="token punctuation">.</span><span class="token function">useRealisticPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nex<span class="token punctuation">.</span>Physics<span class="token punctuation">.</span>acc <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Engine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    width<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>\n    height<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n    displayMode<span class="token operator">:</span> ex<span class="token punctuation">.</span>DisplayMode<span class="token punctuation">.</span>FitScreen\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    pos<span class="token operator">:</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>halfDrawWidth<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    width<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    height<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    rotation<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    color<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span>\n    collisionType<span class="token operator">:</span> ex<span class="token punctuation">.</span>CollisionType<span class="token punctuation">.</span>Active\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> trianglePoints <span class="token operator">=</span> <span class="token punctuation">[</span>ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> triangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    pos<span class="token operator">:</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>halfDrawWidth<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    rotation<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    collider<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">PolygonCollider</span><span class="token punctuation">(</span><span class="token punctuation">{</span>points<span class="token operator">:</span> trianglePoints<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    collisionType<span class="token operator">:</span> ex<span class="token punctuation">.</span>CollisionType<span class="token punctuation">.</span>Active\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> triangleGraphic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Polygon</span><span class="token punctuation">(</span><span class="token punctuation">{</span>points<span class="token operator">:</span> trianglePoints<span class="token punctuation">,</span> color<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Green<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntriangle<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>triangleGraphic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    pos<span class="token operator">:</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>halfDrawWidth <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    radius<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n    color<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">,</span>\n    collisionType<span class="token operator">:</span> ex<span class="token punctuation">.</span>CollisionType<span class="token punctuation">.</span>Active\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ground <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    pos<span class="token operator">:</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>halfDrawWidth<span class="token punctuation">,</span> game<span class="token punctuation">.</span>drawHeight<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    width<span class="token operator">:</span> game<span class="token punctuation">.</span>drawWidth<span class="token punctuation">,</span>\n    height<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    color<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>DarkGray<span class="token punctuation">,</span>\n    collisionType<span class="token operator">:</span> ex<span class="token punctuation">.</span>CollisionType<span class="token punctuation">.</span>Fixed\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// start-snippet{collision}</span>\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    game<span class="token punctuation">.</span>currentScene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    game<span class="token punctuation">.</span>currentScene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    game<span class="token punctuation">.</span>currentScene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    game<span class="token punctuation">.</span>currentScene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ground<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    game<span class="token punctuation">.</span>currentScene<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>pos <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">vec</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>halfDrawWidth<span class="token punctuation">,</span> game<span class="token punctuation">.</span>halfDrawHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}})),"\n",t.createElement(s,{src:"https://excaliburjs.com/excalibur-snippets/collision/"}),"\n",t.createElement(o,null,t.createElement(a.p,null,"For more information on collisions, see ",t.createElement(a.a,{href:"/docs/physics"},"Physics"),".")))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)};function p(n,a){throw new Error("Expected "+(a?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}var l=s(4854),i=s(2436),r=s(2030),u=s(7306),k=s(2768),d=s(871),m=s(7924),h=s(9813);const g={Link:l.rU,Note:k.Z,Example:d.Z,IFrameEmbed:m.Z,CodeSandboxEmbed:h.Z},f=n=>{let{toc:a,releases:s}=n;return t.createElement("div",{id:"docs-toc",className:"ui fluid vertical docs text menu"},t.createElement("a",{id:"open-toc",className:"ui button docs-open",href:"#open-toc"},t.createElement("i",{className:"hamburger icon"})," ",t.createElement("span",{className:"toc-closed"},"Open")," Table of Contents"),t.createElement("a",{className:"ui button docs-close",href:"#docs-content"},t.createElement("i",{className:"hamburger icon"})," ",t.createElement("span",{className:"toc-opened"},"Close")," Table of Contents"),t.createElement("div",{id:"user-guides",className:"header item"}," Documentation"),(()=>{const n={};for(let s of a)n[s.frontmatter.section]||(n[s.frontmatter.section]=[]),n[s.frontmatter.section].push(s);return Object.keys(n).map((a=>t.createElement(t.Fragment,{key:a},t.createElement("section",null,t.createElement(l.rU,{className:"item active",style:{fontSize:"1.2em"},to:n[a][0].frontmatter.path},a),t.createElement("div",{className:"sub item"},t.createElement("div",{className:"menu"},n[a].map((n=>{let{frontmatter:a}=n;return t.createElement(l.rU,{key:a.path,activeClassName:"active",className:"item",style:{fontSize:"1em"},to:a.path},a.title)}))))))))})(),t.createElement("a",{className:"item",href:"/examples/"}," Examples"),t.createElement("div",{className:"header item"},"API Reference"),t.createElement("a",{className:"item",href:"/docs/api/edge/"}," Edge (latest)"),s.map((n=>t.createElement("a",{key:n.tag.name,className:"item",href:"/docs/api/"+n.tag.name+"/"},n.tag.name))))},E=()=>t.createElement("div",{className:"docs-search"},t.createElement(i.F,{apiKey:"f8e274d9f62a3088bb54ab80f766d740",appId:"IVI5ONIKWP",indexName:"excaliburjs"})),b=n=>{let{data:a}=n;return t.createElement(t.Fragment,null,t.createElement("title",null,a.page.frontmatter.title),t.createElement("link",{rel:"preconnect",href:"https://IVI5ONIKWP-dsn.algolia.net",crossOrigin:"true"}),t.createElement("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/css?family=Libre+Baskerville:400,400i,700"}))};function w(n){let{data:a,children:s}=n;const{page:o,toc:c,github:{data:{repository:{releases:p}}}}=a,{frontmatter:l}=o;return t.createElement(r.Z,null,t.createElement(u.Z),t.createElement("div",{className:"ui page stackable relaxed grid"},t.createElement("div",{className:"four wide column"},t.createElement(E),t.createElement(f,{toc:c.edges.map((n=>n.node)),releases:p.edges.map((n=>n.node))})),t.createElement("div",{className:"twelve wide column"},t.createElement("div",{className:"ui left aligned container"},t.createElement("h1",null,l.title),t.createElement("div",{id:"docs-content",className:"docs-content"},t.createElement(e.Zo,{components:g},s))))))}function y(n){return t.createElement(w,n,t.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-docs-page-template-js-content-file-path-docs-03-actors-mdx-fba938ec51a400e99010.js.map