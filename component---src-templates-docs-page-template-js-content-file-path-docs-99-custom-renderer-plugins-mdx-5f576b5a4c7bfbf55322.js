"use strict";(self.webpackChunkexcaliburjs_github_io=self.webpackChunkexcaliburjs_github_io||[]).push([[9179],{9826:function(n,s,a){a.r(s),a.d(s,{Head:function(){return f},default:function(){return b}});var t=a(1151),e=a(7294);function p(n){const s=Object.assign({p:"p",a:"a",h2:"h2",span:"span"},(0,t.ah)(),n.components),{Note:a}=s;return a||function(n,s){throw new Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),e.createElement(e.Fragment,null,e.createElement(s.p,null,"Excalibur knows how to draw many types graphics to the screen by default comes with those pre-installed into the ",e.createElement(s.a,{href:"/docs/api/edge/interfaces/ExcaliburGraphicsContext.html",title:"View 'ExcaliburGraphicsContext' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"ExcaliburGraphicsContext"),". However, you may have a unique requirement to provide custom WebGL commands into excalibur, this can be done with a custom renderer plugin."),"\n",e.createElement(a,{variant:"warning"},e.createElement(s.p,null,"This is an advanced API it is recommended you use built in graphics unless you are comfortable with building WebGL geometry and shaders.")),"\n",e.createElement(s.h2,{id:"registering-a-renderer-plugin",style:{position:"relative"}},e.createElement(s.a,{href:"#registering-a-renderer-plugin","aria-label":"registering a renderer plugin permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Registering a renderer plugin"),"\n",e.createElement(s.p,null,"Registering a renderer with the graphics context will allow you to call it's draw method during your game."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Engine</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// register</span>\n    game<span class="token punctuation">.</span>graphicsContext<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// call from a graphics callback or event</span>\n<span class="token keyword">const</span> actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nactor<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function-variable function">onPostDraw</span> <span class="token operator">=</span> <span class="token punctuation">(</span>graphicsContext<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    graphicsContext<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">draw</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyCustomRenderer<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">\'myrenderer\'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.h2,{id:"writing-a-custom-render-plugin",style:{position:"relative"}},e.createElement(s.a,{href:"#writing-a-custom-render-plugin","aria-label":"writing a custom render plugin permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Writing a custom render plugin"),"\n",e.createElement(s.p,null,"In order to build a custom renderer extend the ",e.createElement(s.a,{href:"",title:"Missing link to 'RendererPlugin' docs. We will happily accept a PR to fix this! üôè",className:"tsdoc-link tsdoc-link--missing",target:"_blank"},"RendererPlugin")," interface"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomRenderer</span> <span class="token keyword">extends</span> <span class="token class-name">ex</span><span class="token punctuation">.</span>RendererPlugin <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Unique type name for this renderer plugin\n   */</span>\n  <span class="token keyword">readonly</span> type<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">\'myrenderer\'</span>\n\n  <span class="token comment">/**\n   * Render priority tie breaker when drawings are at the same z index\n   * @warning Not yet used by excalibur\n   */</span>\n  priority<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token comment">/**\n   * Initialize your renderer\n   *\n   * @param gl\n   * @param context\n   */</span>\n  <span class="token function">initialize</span><span class="token punctuation">(</span>\n    gl<span class="token operator">:</span> WebGLRenderingContext<span class="token punctuation">,</span>\n    context<span class="token operator">:</span> ExcaliburGraphicsContextWebGL\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token comment">// initialize and compile shader</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/**\n   * Issue a draw command to draw something to the screen\n   * @param args\n   */</span>\n  <span class="token function">draw</span><span class="token punctuation">(</span>some<span class="token operator">:</span> ex<span class="token punctuation">.</span>Vector<span class="token punctuation">,</span> args<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token comment">// update internal state with draw command with the args</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/**\n   * @returns if there are any pending draws in the renderer\n   */</span>\n  <span class="token function">hasPendingDraws</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token comment">// if there are any un-flushed drawings</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/**\n   * Flush any pending graphics draws to the screen\n   */</span>\n  <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token comment">// flush all pending draws to the screen</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"For example this is the ",e.createElement(s.a,{href:"",title:"Missing link to 'PointRenderer' docs. We will happily accept a PR to fix this! üôè",className:"tsdoc-link tsdoc-link--missing",target:"_blank"},"PointRenderer")," implementation"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PointRenderer</span> <span class="token keyword">implements</span> <span class="token class-name">RendererPlugin</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">readonly</span> type <span class="token operator">=</span> <span class="token string">\'ex.point\'</span>\n  <span class="token keyword">public</span> priority<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">private</span> _shader<span class="token operator">:</span> Shader\n  <span class="token keyword">private</span> _maxPoints<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10922</span>\n  <span class="token keyword">private</span> _buffer<span class="token operator">:</span> VertexBuffer\n  <span class="token keyword">private</span> _layout<span class="token operator">:</span> VertexLayout\n  <span class="token keyword">private</span> _gl<span class="token operator">:</span> WebGLRenderingContext\n  <span class="token keyword">private</span> _context<span class="token operator">:</span> ExcaliburGraphicsContextWebGL\n  <span class="token keyword">private</span> _pointCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">private</span> _vertexIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token function">initialize</span><span class="token punctuation">(</span>\n    gl<span class="token operator">:</span> WebGLRenderingContext<span class="token punctuation">,</span>\n    context<span class="token operator">:</span> ExcaliburGraphicsContextWebGL\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_gl <span class="token operator">=</span> gl\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_context <span class="token operator">=</span> context\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_shader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      vertexSource<span class="token operator">:</span> pointVertexSource<span class="token punctuation">,</span>\n      fragmentSource<span class="token operator">:</span> pointFragmentSource<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_shader<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_shader<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_shader<span class="token punctuation">.</span><span class="token function">setUniformMatrix</span><span class="token punctuation">(</span><span class="token string">\'u_matrix\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>ortho<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VertexBuffer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      size<span class="token operator">:</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_maxPoints<span class="token punctuation">,</span>\n      type<span class="token operator">:</span> <span class="token string">\'dynamic\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VertexLayout</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      shader<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_shader<span class="token punctuation">,</span>\n      vertexBuffer<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_buffer<span class="token punctuation">,</span>\n      attributes<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">[</span><span class="token string">\'a_position\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">[</span><span class="token string">\'a_color\'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">[</span><span class="token string">\'a_size\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">draw</span><span class="token punctuation">(</span>point<span class="token operator">:</span> Vector<span class="token punctuation">,</span> color<span class="token operator">:</span> Color<span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Force a render if the batch is full</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_pointCount<span class="token operator">++</span>\n\n    <span class="token keyword">const</span> transform <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> opacity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>opacity\n\n    <span class="token keyword">const</span> finalPoint <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token function">multv</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vertexBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_buffer<span class="token punctuation">.</span>bufferData\n    vertexBuffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> finalPoint<span class="token punctuation">.</span>x\n    vertexBuffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> finalPoint<span class="token punctuation">.</span>y\n    vertexBuffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">.</span>r <span class="token operator">/</span> <span class="token number">255</span>\n    vertexBuffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">.</span>g <span class="token operator">/</span> <span class="token number">255</span>\n    vertexBuffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">.</span>b <span class="token operator">/</span> <span class="token number">255</span>\n    vertexBuffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">.</span>a <span class="token operator">*</span> opacity\n    vertexBuffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span>\n      size <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span><span class="token function">getScaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> transform<span class="token punctuation">.</span><span class="token function">getScaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">private</span> <span class="token function">_isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_pointCount <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_maxPoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">hasPendingDraws</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_pointCount <span class="token operator">!==</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token comment">// nothing to draw early exit</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_pointCount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> gl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gl\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_shader<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_layout<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_shader<span class="token punctuation">.</span><span class="token function">setUniformMatrix</span><span class="token punctuation">(</span><span class="token string">\'u_matrix\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>ortho<span class="token punctuation">)</span>\n\n    gl<span class="token punctuation">.</span><span class="token function">drawArrays</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">POINTS</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_pointCount<span class="token punctuation">)</span>\n\n    GraphicsDiagnostics<span class="token punctuation">.</span>DrawnImagesCount <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_pointCount\n    GraphicsDiagnostics<span class="token punctuation">.</span>DrawCallCount<span class="token operator">++</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_pointCount <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_vertexIndex <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)};var c=a(4160),l=a(3539),r=a(2030),u=a(7306),i=a(2768),k=a(871),d=a(7924),m=a(9813);const h={Link:c.rU,Note:i.Z,Example:k.Z,IFrameEmbed:d.Z,CodeSandboxEmbed:m.Z},g=n=>{let{toc:s,releases:a}=n;return e.createElement("div",{id:"docs-toc",className:"ui fluid vertical docs text menu"},e.createElement("a",{id:"open-toc",className:"ui button docs-open",href:"#open-toc"},e.createElement("i",{className:"hamburger icon"})," ",e.createElement("span",{className:"toc-closed"},"Open")," Table of Contents"),e.createElement("a",{className:"ui button docs-close",href:"#docs-content"},e.createElement("i",{className:"hamburger icon"})," ",e.createElement("span",{className:"toc-opened"},"Close")," Table of Contents"),e.createElement("div",{id:"user-guides",className:"header item"},"Documentation"),(()=>{const n={};for(let a of s)n[a.frontmatter.section]||(n[a.frontmatter.section]=[]),n[a.frontmatter.section].push(a);return Object.keys(n).map((s=>e.createElement(e.Fragment,{key:s},e.createElement("section",null,e.createElement(c.rU,{className:"item active",style:{fontSize:"1.2em"},to:n[s][0].frontmatter.path},s),e.createElement("div",{className:"sub item"},e.createElement("div",{className:"menu"},n[s].map((n=>{let{frontmatter:s}=n;return e.createElement(c.rU,{key:s.path,activeClassName:"active",className:"item",style:{fontSize:"1em"},to:s.path},s.title)}))))))))})(),e.createElement("a",{className:"item",href:"/examples/"},"Examples"),e.createElement("div",{className:"header item"},"API Reference"),e.createElement("a",{className:"item",href:"/docs/api/edge/"},"Edge (latest)"),a.map((n=>e.createElement("a",{key:n.tag.name,className:"item",href:"/docs/api/"+n.tag.name+"/"},n.tag.name))))},y=()=>e.createElement("div",{className:"docs-search"},e.createElement(l.F,{apiKey:"f8e274d9f62a3088bb54ab80f766d740",appId:"IVI5ONIKWP",indexName:"excaliburjs"})),f=n=>{let{data:s}=n;return e.createElement(e.Fragment,null,e.createElement("title",null,s.page.frontmatter.title),e.createElement("link",{rel:"preconnect",href:"https://IVI5ONIKWP-dsn.algolia.net",crossOrigin:"true"}),e.createElement("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/css?family=Libre+Baskerville:400,400i,700"}))};function w(n){let{data:s,children:a}=n;const{page:p,toc:o,github:{data:{repository:{releases:c}}}}=s,{frontmatter:l}=p;return e.createElement(r.Z,null,e.createElement(u.Z),e.createElement("div",{className:"ui page stackable relaxed grid"},e.createElement("div",{className:"four wide column"},e.createElement(y),e.createElement(g,{toc:o.edges.map((n=>n.node)),releases:c.edges.map((n=>n.node))})),e.createElement("div",{className:"twelve wide column"},e.createElement("div",{className:"ui left aligned container"},e.createElement("h1",null,l.title),e.createElement("div",{id:"docs-content",className:"docs-content"},e.createElement(t.Zo,{components:h},a))))))}function b(n){return e.createElement(w,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-docs-page-template-js-content-file-path-docs-99-custom-renderer-plugins-mdx-5f576b5a4c7bfbf55322.js.map