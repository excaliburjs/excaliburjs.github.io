"use strict";(self.webpackChunkexcaliburjs_github_io=self.webpackChunkexcaliburjs_github_io||[]).push([[9602],{1982:function(n,a,s){s.r(a),s.d(a,{Head:function(){return y},default:function(){return b}});var e=s(1151),t=s(7294);function o(n){const a=Object.assign({h2:"h2",a:"a",span:"span",p:"p",code:"code",h3:"h3",strong:"strong"},(0,e.ah)(),n.components),{Note:s}=a;return s||function(n,a){throw new Error("Expected "+(a?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),t.createElement(t.Fragment,null,t.createElement(a.h2,{id:"constructor-arguments",style:{position:"relative"}},t.createElement(a.a,{href:"#constructor-arguments","aria-label":"constructor arguments permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constructor Arguments"),"\n",t.createElement(a.p,null,"In Excalibur there are option bag constructors available on most types. These support any public property or member, methods are not supported. The API documentation does not provide an exhaustive list of possible properties but a list of commonly used properties."),"\n",t.createElement(a.p,null,"For example instead of doing this:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>\nactor<span class="token punctuation">.</span>body<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>type <span class="token operator">=</span> ex<span class="token punctuation">.</span>CollisionType<span class="token punctuation">.</span>Active</code></pre></div>'}}),"\n",t.createElement(a.p,null,"This is possible:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> options<span class="token operator">:</span> ActorArgs <span class="token operator">=</span> <span class="token punctuation">{</span>\n   pos<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   width<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n   height<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n   color<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\nactor<span class="token punctuation">.</span>body<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>type <span class="token operator">=</span> ex<span class="token punctuation">.</span>CollisionType<span class="token punctuation">.</span>Active<span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"In fact you can create a duplicate this way"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  pos<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> actorClone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span>actor<span class="token punctuation">)</span>\n\n<span class="token function">expect</span><span class="token punctuation">(</span>actor<span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>actorClone<span class="token punctuation">.</span>pos<span class="token punctuation">)</span> <span class="token comment">// true;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Types that support option bags can have their properties mass assigned using the assign method."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Actor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n\nactor<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  pos<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  width<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n  color<span class="token operator">:</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"timers",style:{position:"relative"}},t.createElement(a.a,{href:"#timers","aria-label":"timers permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Timers"),"\n",t.createElement(a.p,null,"Timers in Excalibur hook into the main loop so they should be used instead of ",t.createElement(a.code,null,"setTimeout")," as they will\nstart and stop accordingly with the loop."),"\n",t.createElement(s,null,t.createElement(a.p,null,"Timers must be added to the game so they are updated!")),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Timer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something every 1000ms</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Add the timer to the current scene</span>\ngame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n\n<span class="token comment">// start the game and the timer</span>\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// start the timer</span>\n  timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// reset the timer</span>\n  timer<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// stop the timer</span>\n  timer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"triggers",style:{position:"relative"}},t.createElement(a.a,{href:"#triggers","aria-label":"triggers permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Triggers"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"/docs/api/edge/classes/Trigger.html",title:"View 'Trigger' in Excalibur.js Edge API docs",className:"tsdoc-link tsdoc-link--aliased",target:"_blank"},"Triggers")," are a special kind of ",t.createElement(a.a,{href:"/docs/actors"},"Actor")," that allow you to run logic when another actor collides with its bounding box. Think of how traps work in an RPG: they are invisible but let you do custom logic whenever your character steps on one. This is one case where you can use triggers instead of trying to implement a special actor yourself."),"\n",t.createElement(a.h3,{id:"infinite-vs-run-once",style:{position:"relative"}},t.createElement(a.a,{href:"#infinite-vs-run-once","aria-label":"infinite vs run once permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Infinite vs. run once"),"\n",t.createElement(a.p,null,"Triggers run infinitely by default whenever an actor collides with them. To run a trigger ",t.createElement(a.strong,null,"once"),", you can pass [[Trigger.repeat|",t.createElement(a.code,null,"repeat: 1"),"]]."),"\n",t.createElement(a.h3,{id:"creating-a-trigger",style:{position:"relative"}},t.createElement(a.a,{href:"#creating-a-trigger","aria-label":"creating a trigger permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Creating a trigger"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// Start the engine</span>\n<span class="token keyword">var</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Engine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">displayMode</span><span class="token operator">:</span> ex<span class="token punctuation">.</span>DisplayMode<span class="token punctuation">.</span>FullScreen<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Uncomment next line to make the trigger box visible</span>\n<span class="token comment">// game.showDebug(true);</span>\n\n<span class="token comment">// create a handler</span>\n<span class="token keyword">function</span> <span class="token function">onTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// `this` will be the Trigger instance</span>\n  ex<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">\'Trigger was triggered!\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// set a trigger at (100, 100) that is 40x40px that can only be fired once</span>\n<span class="token keyword">var</span> trigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Trigger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">pos</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">target</span><span class="token operator">:</span> actor<span class="token punctuation">,</span>\n  <span class="token literal-property property">action</span><span class="token operator">:</span> onTrigger<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// create an actor above the trigger</span>\n<span class="token keyword">var</span> actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Actor</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>\n\n<span class="token comment">// Enable collision on actor (else trigger won\'t fire)</span>\nactor<span class="token punctuation">.</span>body<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>type <span class="token operator">=</span> ex<span class="token punctuation">.</span>CollisionType<span class="token punctuation">.</span>Active\n\n<span class="token comment">// tell the actor to move across the trigger with a velocity of 100</span>\nactor<span class="token punctuation">.</span>actions<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Add trigger and actor to our scene and start the scene</span>\ngame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span>\ngame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>actor<span class="token punctuation">)</span>\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"logging",style:{position:"relative"}},t.createElement(a.a,{href:"#logging","aria-label":"logging permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Logging"),"\n",t.createElement(a.p,null,"Rather than using ",t.createElement(a.code,null,"console.log")," you can use Excalibur's native logging provider which can be controlled\nwith engine options and eventually will support different output mechanisms."),"\n",t.createElement(a.h3,{id:"example-logging",style:{position:"relative"}},t.createElement(a.a,{href:"#example-logging","aria-label":"example logging permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Example: Logging"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// set default log level (default: Info)</span>\nex<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>defaultLevel <span class="token operator">=</span> ex<span class="token punctuation">.</span>LogLevel<span class="token punctuation">.</span>Warn\n<span class="token comment">// this will not be shown because it is below Warn</span>\nex<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">\'This will be logged as Info\'</span><span class="token punctuation">)</span>\n<span class="token comment">// this will show because it is Warn</span>\nex<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">\'This will be logged as Warn\'</span><span class="token punctuation">)</span>\n<span class="token comment">// this will show because it is above Warn</span>\nex<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">\'This will be logged as Error\'</span><span class="token punctuation">)</span>\n<span class="token comment">// this will show because it is above Warn</span>\nex<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">\'This will be logged as Fatal\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"async-promises",style:{position:"relative"}},t.createElement(a.a,{href:"#async-promises","aria-label":"async promises permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Async Promises"),"\n",t.createElement(a.p,null,"Promises can be chained together and can be useful for creating a queue\nof functions to be called when something is done.\nThe first ",t.createElement(a.a,{href:"",title:"Missing link to 'Promise' docs. We will happily accept a PR to fix this! 🙏",className:"tsdoc-link tsdoc-link--missing",target:"_blank"},"Promise")," you will encounter is probably ",t.createElement(a.a,{href:"/docs/api/edge/classes/Engine.html#start",title:"View 'Engine.start' in Excalibur.js Edge API docs",className:"tsdoc-link",target:"_blank"},"Engine.start"),"\nwhich resolves when the game has finished loading."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// perform start-up logic once game is ready</span>\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// start-up &amp; initialization logic</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"differences-from-native-promises",style:{position:"relative"}},t.createElement(a.a,{href:"#differences-from-native-promises","aria-label":"differences from native promises permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Differences from Native Promises"),"\n",t.createElement(a.p,null,"We are working on rewriting Excalibur to use native ES2015 Promises but until then,\nyou may notice inconsistencies. You should still be able to use ",t.createElement(a.code,null,"async")," / ",t.createElement(a.code,null,"await"),"."),"\n",t.createElement(a.h3,{id:"handling-errors",style:{position:"relative"}},t.createElement(a.a,{href:"#handling-errors","aria-label":"handling errors permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Handling errors"),"\n",t.createElement(a.p,null,"You can optionally pass an error handler to ",t.createElement(a.a,{href:"",title:"Missing link to 'Promise.then' docs. We will happily accept a PR to fix this! 🙏",className:"tsdoc-link tsdoc-link--missing",target:"_blank"},"Promise.then")," which will handle\nany errors that occur during Promise execution."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex<span class="token punctuation">.</span>Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ngame<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token comment">// success handler</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// error handler</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Any errors that go unhandled will be bubbled up to the browser."))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)};var c=s(4160),l=s(3539),r=s(2030),i=s(7306),u=s(2768),k=s(871),m=s(7924),g=s(9813);const d={Link:c.rU,Note:u.Z,Example:k.Z,IFrameEmbed:m.Z,CodeSandboxEmbed:g.Z},h=n=>{let{toc:a,releases:s}=n;return t.createElement("div",{id:"docs-toc",className:"ui fluid vertical docs text menu"},t.createElement("a",{id:"open-toc",className:"ui button docs-open",href:"#open-toc"},t.createElement("i",{className:"hamburger icon"})," ",t.createElement("span",{className:"toc-closed"},"Open")," Table of Contents"),t.createElement("a",{className:"ui button docs-close",href:"#docs-content"},t.createElement("i",{className:"hamburger icon"})," ",t.createElement("span",{className:"toc-opened"},"Close")," Table of Contents"),t.createElement("div",{id:"user-guides",className:"header item"},"Documentation"),(()=>{const n={};for(let s of a)n[s.frontmatter.section]||(n[s.frontmatter.section]=[]),n[s.frontmatter.section].push(s);return Object.keys(n).map((a=>t.createElement(t.Fragment,{key:a},t.createElement("section",null,t.createElement(c.rU,{className:"item active",style:{fontSize:"1.2em"},to:n[a][0].frontmatter.path},a),t.createElement("div",{className:"sub item"},t.createElement("div",{className:"menu"},n[a].map((n=>{let{frontmatter:a}=n;return t.createElement(c.rU,{key:a.path,activeClassName:"active",className:"item",style:{fontSize:"1em"},to:a.path},a.title)}))))))))})(),t.createElement("a",{className:"item",href:"/examples/"},"Examples"),t.createElement("div",{className:"header item"},"API Reference"),t.createElement("a",{className:"item",href:"/docs/api/edge/"},"Edge (latest)"),s.map((n=>t.createElement("a",{key:n.tag.name,className:"item",href:"/docs/api/"+n.tag.name+"/"},n.tag.name))))},f=()=>t.createElement("div",{className:"docs-search"},t.createElement(l.F,{apiKey:"f8e274d9f62a3088bb54ab80f766d740",appId:"IVI5ONIKWP",indexName:"excaliburjs"})),y=n=>{let{data:a}=n;return t.createElement(t.Fragment,null,t.createElement("title",null,a.page.frontmatter.title),t.createElement("link",{rel:"preconnect",href:"https://IVI5ONIKWP-dsn.algolia.net",crossOrigin:"true"}),t.createElement("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/css?family=Libre+Baskerville:400,400i,700"}))};function v(n){let{data:a,children:s}=n;const{page:o,toc:p,github:{data:{repository:{releases:c}}}}=a,{frontmatter:l}=o;return t.createElement(r.Z,null,t.createElement(i.Z),t.createElement("div",{className:"ui page stackable relaxed grid"},t.createElement("div",{className:"four wide column"},t.createElement(f),t.createElement(h,{toc:p.edges.map((n=>n.node)),releases:c.edges.map((n=>n.node))})),t.createElement("div",{className:"twelve wide column"},t.createElement("div",{className:"ui left aligned container"},t.createElement("h1",null,l.title),t.createElement("div",{id:"docs-content",className:"docs-content"},t.createElement(e.Zo,{components:d},s))))))}function b(n){return t.createElement(v,n,t.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-docs-page-template-js-content-file-path-docs-99-utilities-mdx-77927983a5edea69eb6d.js.map