"use strict";(self.webpackChunkexcaliburjs_github_io=self.webpackChunkexcaliburjs_github_io||[]).push([[5106],{3093:function(e,a,n){n.r(a),n.d(a,{Head:function(){return f},default:function(){return y}});var s=n(1151),t=n(7294);function c(e){const a=Object.assign({p:"p",a:"a",span:"span"},(0,s.ah)(),e.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"A sprite is a view into a ",t.createElement(a.a,{href:"#ImageSource"},"ImageSource")," and a projection into a final destination size."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">ImageSource</span><span class="token punctuation">(</span><span class="token string">\'./img/myimage.png\'</span><span class="token punctuation">)</span>\n<span class="token comment">// keep in mind this wont work until the raw image is loaded</span>\n<span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  image<span class="token operator">:</span> image<span class="token punctuation">,</span>\n  sourceView<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Take a small slice of the source image starting at pixel (10, 10) with dimension 20 pixels x 20 pixels</span>\n    x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    y<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    width<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n    height<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  destSize<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Optionally specify a different projected size, otherwise use the source</span>\n    width<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    height<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Many times a sprite is the exact same view and size as the source ",t.createElement(a.a,{href:"#ImageSource"},"raw image")," so there is a quick static helper to do this"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ex</span><span class="token punctuation">.</span><span class="token function">ImageSource</span><span class="token punctuation">(</span><span class="token string">\'./img/myimage.png\'</span><span class="token punctuation">)</span>\n<span class="token comment">// keep in mind this wont work until the image source is loaded</span>\n<span class="token keyword">const</span> sprite <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">toSprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}))}var o=function(e){void 0===e&&(e={});const{wrapper:a}=Object.assign({},(0,s.ah)(),e.components);return a?t.createElement(a,e,t.createElement(c,e)):c(e)},p=n(4854),l=n(2436),r=n(2030),i=n(7306),m=n(2768),u=n(871),d=n(7924),k=n(9813);const g={Link:p.rU,Note:m.Z,Example:u.Z,IFrameEmbed:d.Z,CodeSandboxEmbed:k.Z},h=e=>{let{toc:a,releases:n}=e;return t.createElement("div",{id:"docs-toc",className:"ui fluid vertical docs text menu"},t.createElement("a",{id:"open-toc",className:"ui button docs-open",href:"#open-toc"},t.createElement("i",{className:"hamburger icon"})," ",t.createElement("span",{className:"toc-closed"},"Open")," Table of Contents"),t.createElement("a",{className:"ui button docs-close",href:"#docs-content"},t.createElement("i",{className:"hamburger icon"})," ",t.createElement("span",{className:"toc-opened"},"Close")," Table of Contents"),t.createElement("div",{id:"user-guides",className:"header item"}," Documentation"),(()=>{const e={};for(let n of a)e[n.frontmatter.section]||(e[n.frontmatter.section]=[]),e[n.frontmatter.section].push(n);return Object.keys(e).map((a=>t.createElement(t.Fragment,{key:a},t.createElement("section",null,t.createElement(p.rU,{className:"item active",style:{fontSize:"1.2em"},to:e[a][0].frontmatter.path},a),t.createElement("div",{className:"sub item"},t.createElement("div",{className:"menu"},e[a].map((e=>{let{frontmatter:a}=e;return t.createElement(p.rU,{key:a.path,activeClassName:"active",className:"item",style:{fontSize:"1em"},to:a.path},a.title)}))))))))})(),t.createElement("a",{className:"item",href:"/examples/"}," Examples"),t.createElement("div",{className:"header item"},"API Reference"),t.createElement("a",{className:"item",href:"/docs/api/edge/"}," Edge (latest)"),n.map((e=>t.createElement("a",{key:e.tag.name,className:"item",href:"/docs/api/"+e.tag.name+"/"},e.tag.name))))},E=()=>t.createElement("div",{className:"docs-search"},t.createElement(l.F,{apiKey:"f8e274d9f62a3088bb54ab80f766d740",appId:"IVI5ONIKWP",indexName:"excaliburjs"})),f=e=>{let{data:a}=e;return t.createElement(t.Fragment,null,t.createElement("title",null,a.page.frontmatter.title),t.createElement("link",{rel:"preconnect",href:"https://IVI5ONIKWP-dsn.algolia.net",crossOrigin:"true"}),t.createElement("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/css?family=Libre+Baskerville:400,400i,700"}))};function b(e){let{data:a,children:n}=e;const{page:c,toc:o,github:{data:{repository:{releases:p}}}}=a,{frontmatter:l}=c;return t.createElement(r.Z,null,t.createElement(i.Z),t.createElement("div",{className:"ui page stackable relaxed grid"},t.createElement("div",{className:"four wide column"},t.createElement(E),t.createElement(h,{toc:o.edges.map((e=>e.node)),releases:p.edges.map((e=>e.node))})),t.createElement("div",{className:"twelve wide column"},t.createElement("div",{className:"ui left aligned container"},t.createElement("h1",null,l.title),t.createElement("div",{id:"docs-content",className:"docs-content"},t.createElement(s.Zo,{components:g},n))))))}function y(e){return t.createElement(b,e,t.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-templates-docs-page-template-js-content-file-path-docs-04-1-sprites-mdx-65f2dffe3939d94aa730.js.map